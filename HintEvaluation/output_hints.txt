
/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue <= limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if(value == 11)
        {
            value = value + 1;
        }
        else
        {
            value = (value + 1) % limit;
        }
    }
}

Target
      public void setValue(int replacementValue)
      {
-         if((replacementValue >= 0) && (replacementValue <= limit)) {
+         if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
          }
      }
...
      public void increment()
      {
-         if(value == 11)
-         {
-             value = value + 1;
-         }
-         else
-         {
-             value = (value + 1) % limit;
-         }
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue <= limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if(value == 11)
        {
            value = value + 1;
        }
        else
        {
            value = (value + 1) % limit;
        }
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private int minValue;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit, int initial)
    {
        limit = rollOverLimit;
        value = 0;
        minValue = initial;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }
    
    public int getMin()
    {
        return minValue;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if(value<minValue){value = value + 1;}
        value = (value + 1) % limit;
    }
}

Target
      private int limit;
      private int value;
-     private int minValue;
  
      /**
       * Constructor for objects of class NumberDisplay.
...
       * Set the limit at which the display rolls over.
       */
-     public NumberDisplay(int rollOverLimit, int initial)
+     public NumberDisplay(int rollOverLimit)
      {
          limit = rollOverLimit;
          value = 0;
-         minValue = initial;
      }
  
      /**
...
          return value;
      }
-     
-     public int getMin()
-     {
-         return minValue;
-     }
  
      /**
       * Return the display value (that is, the current value as a two-digit
...
      public void increment()
      {
-         if(value<minValue){value = value + 1;}
          value = (value + 1) % limit;
      }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private int minValue;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit, int initial)
    {
        limit = rollOverLimit;
        value = 0;
        minValue = initial;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }
    
    public int getMin()
    {
        return minValue;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if(value<minValue){value = value + 1;}
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public int getDisplayValue()
    {
        return value;
        
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
       * zero).
       */
-     public int getDisplayValue()
+     public String getDisplayValue()
      {
-         return value;
-         
+         if(value < 10) {
+             return "0" + value;
+         }
+         else {
+             return "" + value;
+         }
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public int getDisplayValue()
    {
        return value;
        
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
  
      /**
+      * Return the display value (that is, the current value as a two-digit
+      * String. If the value is less than ten, it will be padded with a leading
+      * zero).
+      */
+     public String getDisplayValue()
+     {
+         if(value < 10) {
+             return "0" + value;
+         }
+         else {
+             return "" + value;
+         }
+     }
+ 
+     /**
       * Set the value of the display to the new specified value. If the new
       * value is less than zero or over the limit, do nothing.
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
       * zero).
       */
+     public String getDisplayValue()
+     {
+         if(value < 10) {
+             return "0" + value;
+         }
+         else {
+             return "" + value;
+         }
+     }
  
      /**
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
    [JavadocComment=]
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue
d: CompilationUnit->ClassOrInterfaceDeclaration: [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue, JavadocComment:] -> [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue]

Location: 40|7
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration: [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue, JavadocComment:] -> [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue]
Location: 36|5
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration: [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue, JavadocComment:] -> [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue]

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /<span class="deletion" data-tooltip="This code may be incorrect.">**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */</span>

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1);
        if (value >= limit){
            value = 0;
        }
    }
}

Target
      public void increment()
      {
-         value = (value + 1);
-         if (value >= limit){
-             value = 0;
-         }
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1);
        if (value >= limit){
            value = 0;
        }
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 1) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      public void setValue(int replacementValue)
      {
-         if((replacementValue >= 1) && (replacementValue < limit)) {
+         if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
          }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 1) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {   
        
        if(value < 10) {
        return "0" + value;
        }
        else {
        return "" + value;
        }
         
        
        
        
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
+ 
       */
      public String getDisplayValue()
-     {   
-         
+     {
          if(value < 10) {
-         return "0" + value;
+             return "0" + value;
          }
          else {
-         return "" + value;
+             return "" + value;
          }
-          
-         
-         
-         
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {   
        
        if(value < 10) {
        return "0" + value;
        }
        else {
        return "" + value;
        }
         
        
        
        
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if((limit == 12) && (value == 0)) {
            return "12";
        }
        
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
        
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      public String getDisplayValue()
      {
-         if((limit == 12) && (value == 0)) {
-             return "12";
-         }
-         
          if(value < 10) {
              return "0" + value;
          }
...
              return "" + value;
          }
-         
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if((limit == 12) && (value == 0)) {
            return "12";
        }
        
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
        
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    
    
    public int getValue()
    {
        
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
       
        else {
            return value + "";
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      }
  
-     
-     
+     /**
+      * Return the current value.
+      */
      public int getValue()
      {
-         
          return value;
      }
  
...
              return "0" + value;
          }
-        
          else {
-             return value + "";
+             return "" + value;
          }
      }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    
    
    public int getValue()
    {
        
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
       
        else {
            return value + "";
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1);
        if(value == limit) {
            value = 0;
        }
    }
}

Target
      public void increment()
      {
-         value = (value + 1);
-         if(value == limit) {
-             value = 0;
-         }
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1);
        if(value == limit) {
            value = 0;
        }
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 1;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        
        value = (value + 1) % limit;
    }
}

Target
      {
          limit = rollOverLimit;
-         value = 1;
+         value = 0;
      }
  
      /**
...
      public void increment()
      {
-         
          value = (value + 1) % limit;
      }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 1;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = 12;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value >= 13) {
            return value - 12+"pm";
        }
        else {
            return "" + value+"am";
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      public NumberDisplay(int rollOverLimit)
      {
-         limit = 12;
+         limit = rollOverLimit;
          value = 0;
      }
  
...
      public String getDisplayValue()
      {
-         if(value >= 13) {
-             return value - 12+"pm";
+         if(value < 10) {
+             return "0" + value;
          }
          else {
-             return "" + value+"am";
+             return "" + value;
          }
      }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=limit] {
          [AssignExpr=limit] {
            [Operator=ASSIGN]
            [NameExpr=limit]
            [IntegerLiteralExpr=12]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:limit] -> [ExpressionStmt:]
i: {CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr}: [NameExpr:limit] -> [Operator:ASSIGN, NameExpr:limit] w/ {CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->Operator}
i: {CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr}: [Operator:ASSIGN] -> [Operator:ASSIGN, NameExpr:limit] w/ {CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->NameExpr}

Location: 24|19
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:limit] -> [ExpressionStmt:]
Location: 24|9
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:limit] -> [ExpressionStmt:]
some code
some code

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        l<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">imit = 12;</span>
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value >= 13) {
            return value - 12+"pm";
        }
        else {
            return "" + value+"am";
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private int start;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit, int startLimit)
    {
        limit = rollOverLimit;
        value = startLimit;
        start = startLimit;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= start) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if(value < limit-1)
        {
            value++;
        }
        else
        {
            value = start;
        }
    }
}

Target
      private int limit;
      private int value;
-     private int start;
  
      /**
       * Constructor for objects of class NumberDisplay.
...
       * Set the limit at which the display rolls over.
       */
-     public NumberDisplay(int rollOverLimit, int startLimit)
+     public NumberDisplay(int rollOverLimit)
      {
          limit = rollOverLimit;
-         value = startLimit;
-         start = startLimit;
+         value = 0;
      }
  
      /**
...
      public void setValue(int replacementValue)
      {
-         if((replacementValue >= start) && (replacementValue < limit)) {
+         if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
          }
      }
...
      public void increment()
      {
-         if(value < limit-1)
-         {
-             value++;
-         }
-         else
-         {
-             value = start;
-         }
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private int start;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit, int startLimit)
    {
        limit = rollOverLimit;
        value = startLimit;
        start = startLimit;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= start) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if(value < limit-1)
        {
            value++;
        }
        else
        {
            value = start;
        }
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void minutesIncrement()
    {
         value = (value + 1) % limit;
    }
    
    public void hourIncrement()
    {
        value = (value + 1) % limit +1;
    }
    
    public void increment()
    {
        if (limit < 13)
            hourIncrement();
        else
            minutesIncrement();
    }
}

Target
       * limit is reached.
       */
-     public void minutesIncrement()
-     {
-          value = (value + 1) % limit;
-     }
-     
-     public void hourIncrement()
-     {
-         value = (value + 1) % limit +1;
-     }
-     
      public void increment()
      {
-         if (limit < 13)
-             hourIncrement();
-         else
-             minutesIncrement();
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void minutesIncrement()
    {
         value = (value + 1) % limit;
    }
    
    public void hourIncrement()
    {
        value = (value + 1) % limit +1;
    }
    
    public void increment()
    {
        if (limit < 13)
            hourIncrement();
        else
            minutesIncrement();
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private int lowLimit;
    
    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
        lowLimit = 1;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      private int limit;
      private int value;
-     private int lowLimit;
-     
+ 
      /**
       * Constructor for objects of class NumberDisplay.
       * Set the limit at which the display rolls over.
...
          limit = rollOverLimit;
          value = 0;
-         lowLimit = 1;
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private int lowLimit;
    
    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
        lowLimit = 1;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return value + "";
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
          }
          else {
-             return value + "";
+             return "" + value;
          }
      }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return value + "";
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * ### #### ####### ### ### ###### ## ###### ####### ##/## ####### - ## ###
 * ######## ####### ### ###### ####### ###### ###### ##/## #### ### ####### 
 * ##### ####.
 * 
 * @###### ####### ####### ### ##### #. ###### ###### ## ####### #########
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    
    private final int firstValue; //first value after limit is reached (0 or 12)
    private boolean isAm; //true if it is am, false if it is pm
    private boolean watchAm; //true if am/pm concerns us - if we are dealing with hours
    

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     * Set whether am/pm concerns us (whether we are dealing
     * with hours or something else). 
     * If am/pm concerns us, set am to true (it's midnight) and
     * set the first value to 1 since we are using a 1-12 format.
     * If not, set first value to 0 since we are using a 0-59 format.
     */
    public NumberDisplay(int rollOverLimit, boolean watchAmPm)
    {
        limit = rollOverLimit;
        watchAm = watchAmPm;
 
        if (watchAm == true){
            isAm = true;
            firstValue = 12;
            value = 11;
        }
        
        else {
            firstValue = 0;
            value = 59;
        }
        
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }
    
    /**
     * Return the current value of am/pm. If the value is false, it is pm.
     */
    
    public boolean getAm(){
        return isAm;
    }
    
    /**
     * Return whether we am/pm concerns us. If true, we are using a 1-12 format. 
     * If false, we are using a 0-59 format.
     */
    
    public boolean getWatchAm(){
        return watchAm;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero). 
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
     
   }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, print a warning message.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
        
        else
            System.out.println("This value is not allowed");
        
        
    }
    
    /**
     * Set whether it is am or pm. If the supplied boolean is false, it is pm.
     */
    
    public void setAmPm (boolean am)
    {
       
        if (am==true)
            isAm=true;
        else
            isAm=false;
        
        
    }
   

    /**
     * Increment the display value by one, rolling over to first value after limit if the
     * limit is reached. Whenever the limit is reached, am becomes pm and pm becomes am
     * (if am/pm concerns the user).
     */
    public void increment()
    {
        if (value < (limit-1)){
            value++;
        }
        else{
        
        value = firstValue;
        boolean currentAm = this.getAm();
        
        if (watchAm==true){
            
            if (currentAm==true){
                
                isAm=false;
            }
            else {
                
                isAm=true;
            }
            }
      }
    }
}

Target
   * ### ############# ##### ########## # ####### ###### ####### #### ### ####
   * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
-  * ### #######. ### ###### ##### #### #### (#########) ## #####. ## ####,
+  * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
   * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
   * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
   * ############# ##### #### ## #### #### ######## ### #####.
...
   * 
-  * ### #### ####### ### ### ###### ## ###### ####### ##/## ####### - ## ###
-  * ######## ####### ### ###### ####### ###### ###### ##/## #### ### ####### 
-  * ##### ####.
-  * 
-  * @###### ####### ####### ### ##### #. ###### ###### ## ####### #########
+  * @###### ####### ####### ### ##### #. ######
   * @####### ####.##.##
   */
  public class NumberDisplay
...
      private int limit;
      private int value;
-     
-     private final int firstValue; //first value after limit is reached (0 or 12)
-     private boolean isAm; //true if it is am, false if it is pm
-     private boolean watchAm; //true if am/pm concerns us - if we are dealing with hours
-     
  
      /**
       * Constructor for objects of class NumberDisplay.
...
       * Set the limit at which the display rolls over.
-      * Set whether am/pm concerns us (whether we are dealing
-      * with hours or something else). 
-      * If am/pm concerns us, set am to true (it's midnight) and
-      * set the first value to 1 since we are using a 1-12 format.
-      * If not, set first value to 0 since we are using a 0-59 format.
       */
-     public NumberDisplay(int rollOverLimit, boolean watchAmPm)
+     public NumberDisplay(int rollOverLimit)
      {
          limit = rollOverLimit;
-         watchAm = watchAmPm;
-  
-         if (watchAm == true){
-             isAm = true;
-             firstValue = 12;
-             value = 11;
-         }
-         
-         else {
-             firstValue = 0;
-             value = 59;
-         }
-         
+         value = 0;
      }
  
      /**
...
          return value;
      }
-     
-     /**
-      * Return the current value of am/pm. If the value is false, it is pm.
-      */
-     
-     public boolean getAm(){
-         return isAm;
-     }
-     
-     /**
-      * Return whether we am/pm concerns us. If true, we are using a 1-12 format. 
-      * If false, we are using a 0-59 format.
-      */
-     
-     public boolean getWatchAm(){
-         return watchAm;
-     }
  
      /**
       * Return the display value (that is, the current value as a two-digit
...
       * String. If the value is less than ten, it will be padded with a leading
-      * zero). 
+      * zero).
       */
      public String getDisplayValue()
      {
...
              return "" + value;
          }
-      
-    }
+     }
  
      /**
       * Set the value of the display to the new specified value. If the new
-      * value is less than zero or over the limit, print a warning message.
+      * value is less than zero or over the limit, do nothing.
       */
      public void setValue(int replacementValue)
      {
...
              value = replacementValue;
          }
-         
-         else
-             System.out.println("This value is not allowed");
-         
-         
      }
-     
-     /**
-      * Set whether it is am or pm. If the supplied boolean is false, it is pm.
-      */
-     
-     public void setAmPm (boolean am)
-     {
-        
-         if (am==true)
-             isAm=true;
-         else
-             isAm=false;
-         
-         
-     }
-    
  
      /**
-      * Increment the display value by one, rolling over to first value after limit if the
-      * limit is reached. Whenever the limit is reached, am becomes pm and pm becomes am
-      * (if am/pm concerns the user).
+      * Increment the display value by one, rolling over to zero if the
+      * limit is reached.
       */
      public void increment()
      {
-         if (value < (limit-1)){
-             value++;
-         }
-         else{
-         
-         value = firstValue;
-         boolean currentAm = this.getAm();
-         
-         if (watchAm==true){
-             
-             if (currentAm==true){
-                 
-                 isAm=false;
-             }
-             else {
-                 
-                 isAm=true;
-             }
-             }
-       }
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
        [IfStmt=] {
          [BinaryExpr=watchAm] {
            [Operator=EQUALS]
            [NameExpr=watchAm]
            [BooleanLiteralExpr=true]
          }
          [BlockStmt=] {
            [ExpressionStmt=isAm] {
              [AssignExpr=isAm] {
                [Operator=ASSIGN]
                [NameExpr=isAm]
                [BooleanLiteralExpr=true]
              }
            }
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
    [JavadocComment=]
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]
d: CompilationUnit->ClassOrInterfaceDeclaration: [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue, JavadocComment:] -> [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue]

Location: 64|7
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration: [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue, JavadocComment:] -> [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue]
Location: 62|5
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration: [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue, JavadocComment:] -> [FieldDeclaration:limit, ConstructorDeclaration:NumberDisplay, MethodDeclaration:getValue]
Location: 50|9
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]
Location: 41|9
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * ### #### ####### ### ### ###### ## ###### ####### ##/## ####### - ## ###
 * ######## ####### ### ###### ####### ###### ###### ##/## #### ### ####### 
 * ##### ####.
 * 
 * @###### ####### ####### ### ##### #. ###### ###### ## ####### #########
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    
    private final int firstValue; //first value after limit is reached (0 or 12)
    private boolean isAm; //true if it is am, false if it is pm
    private boolean watchAm; //true if am/pm concerns us - if we are dealing with hours
    

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     * Set whether am/pm concerns us (whether we are dealing
     * with hours or something else). 
     * If am/pm concerns us, set am to true (it's midnight) and
     * set the first value to 1 since we are using a 1-12 format.
     * If not, set first value to 0 since we are using a 0-59 format.
     */
    public NumberDisplay(int rollOverLimit, boolean watchAmPm)
    {
        limit = rollOverLimit;
        watchAm = watchAmPm;
 
        i<span class="deletion" data-tooltip="This code may be incorrect.">f (watchAm == true){
            isAm = true;
            firstValue = 12;
            value = 11;
        }
        
        else {
            firstValue = 0;
            value = 59;
        }</span>
        
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }
    
    /<span class="deletion" data-tooltip="This code may be incorrect.">**
     * Return the current value of am/pm. If the value is false, it is pm.
     */</span>
    
    public boolean getAm(){
        return isAm;
    }
    
    /**
     * Return whether we am/pm concerns us. If true, we are using a 1-12 format. 
     * If false, we are using a 0-59 format.
     */
    
    public boolean getWatchAm(){
        return watchAm;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero). 
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
     
   }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, print a warning message.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
        
        else
            System.out.println("This value is not allowed");
        
        
    }
    
    /**
     * Set whether it is am or pm. If the supplied boolean is false, it is pm.
     */
    
    public void setAmPm (boolean am)
    {
       
        if (am==true)
            isAm=true;
        else
            isAm=false;
        
        
    }
   

    /**
     * Increment the display value by one, rolling over to first value after limit if the
     * limit is reached. Whenever the limit is reached, am becomes pm and pm becomes am
     * (if am/pm concerns the user).
     */
    public void increment()
    {
        if (value < (limit-1)){
            value++;
        }
        else{
        
        value = firstValue;
        boolean currentAm = this.getAm();
        
        if (watchAm==true){
            
            if (currentAm==true){
                
                isAm=false;
            }
            else {
                
                isAm=true;
            }
            }
      }
    }
}

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        if (rollOverLimit <= 12)
        {
            value = 12;
            limit = rollOverLimit;
        }
        else
        {
            value = 0;
            limit = rollOverLimit;
        }
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if (limit == 12)
        {
            value = value + 1;
            if (value == 13)
            {
                value = 1;
            }
        }
        else
        {
            value = (value + 1) % limit;
        }
        
    }
}

Target
      public NumberDisplay(int rollOverLimit)
      {
-         if (rollOverLimit <= 12)
-         {
-             value = 12;
-             limit = rollOverLimit;
-         }
-         else
-         {
-             value = 0;
-             limit = rollOverLimit;
-         }
+         limit = rollOverLimit;
+         value = 0;
      }
  
      /**
...
      public void increment()
      {
-         if (limit == 12)
-         {
-             value = value + 1;
-             if (value == 13)
-             {
-                 value = 1;
-             }
-         }
-         else
-         {
-             value = (value + 1) % limit;
-         }
-         
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [IfStmt=] {
          [BinaryExpr=rollOverLimit] {
            [Operator=LESS_EQUALS]
            [NameExpr=rollOverLimit]
            [IntegerLiteralExpr=12]
          }
          [BlockStmt=] {
            [ExpressionStmt=value] {
              [AssignExpr=value] {
                [Operator=ASSIGN]
                [NameExpr=value]
                [IntegerLiteralExpr=12]
              }
            }
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue
r: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt: [BinaryExpr:rollOverLimit, BlockStmt:] -> [BlockStmt:, BinaryExpr:rollOverLimit]
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt->BlockStmt: [ExpressionStmt:value] -> [Operator:ASSIGN] w/ CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt->BlockStmt->ExpressionStmt->AssignExpr->Operator
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt: [BinaryExpr:rollOverLimit, BlockStmt:] -> [BlockStmt:]

Location: 28|9
EditHint (REORDER):
r: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt: [BinaryExpr:rollOverLimit, BlockStmt:] -> [BlockStmt:, BinaryExpr:rollOverLimit]
Location: 26|23
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt->BlockStmt: [ExpressionStmt:value] -> [Operator:ASSIGN] w/ CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt->BlockStmt->ExpressionStmt->AssignExpr->Operator
Location: 26|13
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt->BlockStmt: [ExpressionStmt:value] -> [Operator:ASSIGN] w/ CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt->BlockStmt->ExpressionStmt->AssignExpr->Operator
Location: 25|9
EditHint (REORDER):
r: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt: [BinaryExpr:rollOverLimit, BlockStmt:] -> [BlockStmt:, BinaryExpr:rollOverLimit]
Location: 24|31
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt: [BinaryExpr:rollOverLimit, BlockStmt:] -> [BlockStmt:]
Location: 24|13
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->IfStmt: [BinaryExpr:rollOverLimit, BlockStmt:] -> [BlockStmt:]

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        if (r<span class="deletion" data-tooltip="This code may be incorrect.">ollOverLimit <= 12</span>)
        {<span class="reorder" data-tooltip="This code is good, but it may be in the wrong place.">
            v<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">alue = 12;</span>
            limit = rollOverLimit;
        }</span>
        else
        {
            value = 0;
            limit = rollOverLimit;
        }
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if (limit == 12)
        {
            value = value + 1;
            if (value == 13)
            {
                value = 1;
            }
        }
        else
        {
            value = (value + 1) % limit;
        }
        
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
              return "0" + value;
          }
-         
          else {
              return "" + value;
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else if(value==0)
        {
        return "12"+value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        
       value = (value + 1) % limit;
       
    }
   }

Target
              return "0" + value;
          }
-         else if(value==0)
-         {
-         return "12"+value;
-         }
          else {
              return "" + value;
          }
...
      public void increment()
      {
-         
-        value = (value + 1) % limit;
-        
+         value = (value + 1) % limit;
      }
-    }
+ }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else if(value==0)
        {
        return "12"+value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        
       value = (value + 1) % limit;
       
    }
   }


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if(value==limit-1)
            value=0;
        else
            value=value+1;
    }
}

Target
      public void increment()
      {
-         if(value==limit-1)
-             value=0;
-         else
-             value=value+1;
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if(value==limit-1)
            value=0;
        else
            value=value+1;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 1;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      {
          limit = rollOverLimit;
-         value = 1;
+         value = 0;
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 1;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 12) {
            return ""+value;
        }
        else {
            return ""+(value-10);
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      public String getDisplayValue()
      {
-         if(value < 12) {
-             return ""+value;
+         if(value < 10) {
+             return "0" + value;
          }
          else {
-             return ""+(value-10);
+             return "" + value;
          }
      }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 12) {
            return ""+value;
        }
        else {
            return ""+(value-10);
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
              return "0" + value;
          }
-         
          else {
              return "" + value;
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if (value < (limit - 1)) {
            value += 1;
        }
        else {
            value = 0;
        }
    }
}

Target
      public void increment()
      {
-         if (value < (limit - 1)) {
-             value += 1;
-         }
-         else {
-             value = 0;
-         }
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if (value < (limit - 1)) {
            value += 1;
        }
        else {
            value = 0;
        }
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit + 1)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      public void setValue(int replacementValue)
      {
-         if((replacementValue >= 0) && (replacementValue < limit + 1)) {
+         if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
          }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit + 1)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment(boolean isHour)
    {
        if(isHour){
            value = (value % limit) + 1;
        }else{
           value = (value + 1) % limit; 
        }
    }
}

Target
       * limit is reached.
       */
-     public void increment(boolean isHour)
+     public void increment()
      {
-         if(isHour){
-             value = (value % limit) + 1;
-         }else{
-            value = (value + 1) % limit; 
-         }
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment(boolean isHour)
    {
        if(isHour){
            value = (value % limit) + 1;
        }else{
           value = (value + 1) % limit; 
        }
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
    
    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void incrementH()
    {
        value = (value + 1) % limit;
    }
}

Target
          value = (value + 1) % limit;
      }
-     
-     /**
-      * Increment the display value by one, rolling over to zero if the
-      * limit is reached.
-      */
-     public void incrementH()
-     {
-         value = (value + 1) % limit;
-     }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
    
    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void incrementH()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit,int value)
    {
        limit = rollOverLimit;
        this.value = value;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
       * Set the limit at which the display rolls over.
       */
-     public NumberDisplay(int rollOverLimit,int value)
+     public NumberDisplay(int rollOverLimit)
      {
          limit = rollOverLimit;
-         this.value = value;
+         value = 0;
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit,int value)
    {
        limit = rollOverLimit;
        this.value = value;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) || (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     * 
     * Answers exercise 3.21.
     */
    public void increment()
    {
        if(value < limit-1) {
          value++;
        }
       else{
          value = 0;
        }
    }
}

Target
      public void setValue(int replacementValue)
      {
-         if((replacementValue >= 0) || (replacementValue < limit)) {
+         if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
          }
      }
...
       * Increment the display value by one, rolling over to zero if the
       * limit is reached.
-      * 
-      * Answers exercise 3.21.
       */
      public void increment()
      {
-         if(value < limit-1) {
-           value++;
-         }
-        else{
-           value = 0;
-         }
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) || (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     * 
     * Answers exercise 3.21.
     */
    public void increment()
    {
        if(value < limit-1) {
          value++;
        }
       else{
          value = 0;
        }
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }
    

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else  {
            return value + "" ;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
          value = 0;
      }
-     
  
      /**
       * Return the current value.
...
              return "0" + value;
          }
-         else  {
-             return value + "" ;
+         else {
+             return "" + value;
          }
      }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }
    

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else  {
            return value + "" ;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return " " + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
          }
          else {
-             return " " + value;
+             return "" + value;
          }
      }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return " " + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 1;       
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        
        
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 1) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) ;
        if (value >=13) 
        {value = 1;}
        
        
        
    }
      
     
      
      
      
    
}

Target
      {
          limit = rollOverLimit;
-         value = 1;       
+         value = 0;
      }
  
      /**
...
              return "0" + value;
          }
-         
-         
          else {
              return "" + value;
          }
...
      public void setValue(int replacementValue)
      {
-         if((replacementValue >= 1) && (replacementValue < limit)) {
+         if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
          }
      }
...
      public void increment()
      {
-         value = (value + 1) ;
-         if (value >=13) 
-         {value = 1;}
-         
-         
-         
+         value = (value + 1) % limit;
      }
-       
-      
-       
-       
-       
-     
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 1;       
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        
        
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 1) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) ;
        if (value >=13) 
        {value = 1;}
        
        
        
    }
      
     
      
      
      
    
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 12;
        
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        return "" + value;
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      {
          limit = rollOverLimit;
-         value = 12;
-         
+         value = 0;
      }
  
      /**
...
      public String getDisplayValue()
      {
-         return "" + value;
+         if(value < 10) {
+             return "0" + value;
+         }
+         else {
+             return "" + value;
+         }
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 12;
        
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        return "" + value;
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private boolean minutesOrHours; 

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     * Set whether it will display minutes or hours
     */
    public NumberDisplay(int rollOverLimit, boolean minutesOrHours) //if it is for the minutes, we assign 0 to value; if it is for the hours, we assign 1
    { 
        limit = rollOverLimit;
        this.minutesOrHours = minutesOrHours;
        if(minutesOrHours) value = 0;
        else value = 1;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if (minutesOrHours == true) value = (value + 1) % limit;
        else value = (value + 1) % limit + 1; //so that it starts form 1 for hours and ends at 12
    }
}

Target
      private int limit;
      private int value;
-     private boolean minutesOrHours; 
  
      /**
       * Constructor for objects of class NumberDisplay.
...
       * Set the limit at which the display rolls over.
-      * Set whether it will display minutes or hours
       */
-     public NumberDisplay(int rollOverLimit, boolean minutesOrHours) //if it is for the minutes, we assign 0 to value; if it is for the hours, we assign 1
-     { 
+     public NumberDisplay(int rollOverLimit)
+     {
          limit = rollOverLimit;
-         this.minutesOrHours = minutesOrHours;
-         if(minutesOrHours) value = 0;
-         else value = 1;
+         value = 0;
      }
  
      /**
...
      public void increment()
      {
-         if (minutesOrHours == true) value = (value + 1) % limit;
-         else value = (value + 1) % limit + 1; //so that it starts form 1 for hours and ends at 12
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
        [IfStmt=] {
          [NameExpr=minutesOrHours]
          [ExpressionStmt=value] {
            [AssignExpr=value] {
              [Operator=ASSIGN]
              [NameExpr=value]
              [IntegerLiteralExpr=0]
            }
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]

Location: 29|23
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]
Location: 28|9
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private boolean minutesOrHours; 

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     * Set whether it will display minutes or hours
     */
    public NumberDisplay(int rollOverLimit, boolean minutesOrHours) //if it is for the minutes, we assign 0 to value; if it is for the hours, we assign 1
    { 
        limit = rollOverLimit;
        this.minutesOrHours = minutesOrHours;
        i<span class="deletion" data-tooltip="This code may be incorrect.">f(minutesOrHours) value = 0;
        else value = 1;</span>
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if (minutesOrHours == true) value = (value + 1) % limit;
        else value = (value + 1) % limit + 1; //so that it starts form 1 for hours and ends at 12
    }
}

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 1) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      public void setValue(int replacementValue)
      {
-         if((replacementValue >= 1) && (replacementValue < limit)) {
+         if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
          }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 1) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 1;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      {
          limit = rollOverLimit;
-         value = 1;
+         value = 0;
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 1;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            //return "" + value;
            return value + "";}
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
          }
          else {
-             //return "" + value;
-             return value + "";}
+             return "" + value;
+         }
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            //return "" + value;
            return value + "";}
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return  "" + value;
        }
        
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue, String type) //Adicionado um campo do tipo string para indicar o se a vari��vel value se refere �� horas ou minutos;
    {
        if (type=="h"){ //Se for Horas
            if (replacementValue>=13) //Se as horas passarem de 12
                value = replacementValue-12; //O novo valor das horas passa a ser value-12
            else 
                value = replacementValue;//Se n��o, value recebe o valor passado por par��metro normalmente
        }
        else
            if((replacementValue >= 0) && (replacementValue < limit)){//Se n��o for horas, value recebe o valor passado por par��metro normalmente
                value = replacementValue;
            }
            
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
          }
          else {
-             return  "" + value;
+             return "" + value;
          }
-         
      }
  
      /**
...
       * value is less than zero or over the limit, do nothing.
       */
-     public void setValue(int replacementValue, String type) //Adicionado um campo do tipo string para indicar o se a vari��vel value se refere �� horas ou minutos;
+     public void setValue(int replacementValue)
      {
-         if (type=="h"){ //Se for Horas
-             if (replacementValue>=13) //Se as horas passarem de 12
-                 value = replacementValue-12; //O novo valor das horas passa a ser value-12
-             else 
-                 value = replacementValue;//Se n��o, value recebe o valor passado por par��metro normalmente
+         if((replacementValue >= 0) && (replacementValue < limit)) {
+             value = replacementValue;
          }
-         else
-             if((replacementValue >= 0) && (replacementValue < limit)){//Se n��o for horas, value recebe o valor passado por par��metro normalmente
-                 value = replacementValue;
-             }
-             
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return  "" + value;
        }
        
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue, String type) //Adicionado um campo do tipo string para indicar o se a vari��vel value se refere �� horas ou minutos;
    {
        if (type=="h"){ //Se for Horas
            if (replacementValue>=13) //Se as horas passarem de 12
                value = replacementValue-12; //O novo valor das horas passa a ser value-12
            else 
                value = replacementValue;//Se n��o, value recebe o valor passado por par��metro normalmente
        }
        else
            if((replacementValue >= 0) && (replacementValue < limit)){//Se n��o for horas, value recebe o valor passado por par��metro normalmente
                value = replacementValue;
            }
            
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue <= limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      public void setValue(int replacementValue)
      {
-         if((replacementValue >= 0) && (replacementValue <= limit)) {
+         if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
          }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue <= limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if ((value + 1) < limit) {
            value = value + 1;
        }
        else
            value = 0;
    }
}

Target
      public void increment()
      {
-         if ((value + 1) < limit) {
-             value = value + 1;
-         }
-         else
-             value = 0;
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        if ((value + 1) < limit) {
            value = value + 1;
        }
        else
            value = 0;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {   
        if (ClockDisplay.getAmPm() == false){
            if(value < 10) {
                return "0" + value + "am";
            }
            else {
                return "" + value + "am";
            }
        }
        else{
            if(value < 10) {
                return "0" + value + "pm";
            }
            else {
                return "" + value + "pm";
            }
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
       */
      public String getDisplayValue()
-     {   
-         if (ClockDisplay.getAmPm() == false){
-             if(value < 10) {
-                 return "0" + value + "am";
-             }
-             else {
-                 return "" + value + "am";
-             }
+     {
+         if(value < 10) {
+             return "0" + value;
          }
-         else{
-             if(value < 10) {
-                 return "0" + value + "pm";
-             }
-             else {
-                 return "" + value + "pm";
-             }
+         else {
+             return "" + value;
          }
      }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {   
        if (ClockDisplay.getAmPm() == false){
            if(value < 10) {
                return "0" + value + "am";
            }
            else {
                return "" + value + "am";
            }
        }
        else{
            if(value < 10) {
                return "0" + value + "pm";
            }
            else {
                return "" + value + "pm";
            }
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### #####
 * @####### ##/##/####
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
        else if(replacementValue == 0)
        {
            value = 12;
        }
        else
        {
            value = replacementValue%limit;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
   * ############# ##### #### ## #### #### ######## ### #####.
   * 
-  * @###### ####### #####
-  * @####### ##/##/####
+  * @###### ####### ####### ### ##### #. ######
+  * @####### ####.##.##
   */
  public class NumberDisplay
  {
...
              value = replacementValue;
          }
-         else if(replacementValue == 0)
-         {
-             value = 12;
-         }
-         else
-         {
-             value = replacementValue%limit;
-         }
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### #####
 * @####### ##/##/####
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
        else if(replacementValue == 0)
        {
            value = 12;
        }
        else
        {
            value = replacementValue%limit;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * 
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void hour_setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
        else if(replacementValue>limit)
        {
            value = 1;
        }
    }
    public void minute_setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }
    public void hour_increment()
    {
        value = (value + 1) % limit;
        if(value == 0 )
        {
            value=12;
        }
    }
    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void minute_increment()
    {
        value = (value + 1) % limit;
    }
}

Target
  
      /**
-      * 
       * Return the display value (that is, the current value as a two-digit
       * String. If the value is less than ten, it will be padded with a leading
       * zero).
...
       * value is less than zero or over the limit, do nothing.
       */
-     public void hour_setValue(int replacementValue)
+     public void setValue(int replacementValue)
      {
          if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
...
          }
-         else if(replacementValue>limit)
-         {
-             value = 1;
-         }
      }
-     public void minute_setValue(int replacementValue)
-     {
-         if((replacementValue >= 0) && (replacementValue < limit)) {
-             value = replacementValue;
-         }
-     }
-     public void hour_increment()
-     {
-         value = (value + 1) % limit;
-         if(value == 0 )
-         {
-             value=12;
-         }
-     }
+ 
      /**
       * Increment the display value by one, rolling over to zero if the
       * limit is reached.
...
       */
-     public void minute_increment()
+     public void increment()
      {
          value = (value + 1) % limit;
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * 
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void hour_setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
        else if(replacementValue>limit)
        {
            value = 1;
        }
    }
    public void minute_setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }
    public void hour_increment()
    {
        value = (value + 1) % limit;
        if(value == 0 )
        {
            value=12;
        }
    }
    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void minute_increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private boolean limitFlag;
    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
        if (limit == 24){ 
            limitFlag= true;
        }else{
            limitFlag= false;
        }
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {   
        if (limitFlag=true){
        if((replacementValue >=0)&& (replacementValue < limit)){
            value = replacementValue;
        }
        }else{
        
        if((replacementValue >0) && (replacementValue < 12)) {
            value = replacementValue;
        }
        
        if((replacementValue >12) &&(replacementValue < 24)){
            value = replacementValue -12;
        }
    }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      private int limit;
      private int value;
-     private boolean limitFlag;
+ 
      /**
       * Constructor for objects of class NumberDisplay.
       * Set the limit at which the display rolls over.
...
          limit = rollOverLimit;
          value = 0;
-         if (limit == 24){ 
-             limitFlag= true;
-         }else{
-             limitFlag= false;
-         }
      }
  
      /**
...
       */
      public void setValue(int replacementValue)
-     {   
-         if (limitFlag=true){
-         if((replacementValue >=0)&& (replacementValue < limit)){
+     {
+         if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
          }
-         }else{
-         
-         if((replacementValue >0) && (replacementValue < 12)) {
-             value = replacementValue;
-         }
-         
-         if((replacementValue >12) &&(replacementValue < 24)){
-             value = replacementValue -12;
-         }
      }
-     }
  
      /**
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
        [IfStmt=] {
          [BinaryExpr=limit] {
            [Operator=EQUALS]
            [NameExpr=limit]
            [IntegerLiteralExpr=24]
          }
          [BlockStmt=limitFlag] {
            [ExpressionStmt=limitFlag] {
              [AssignExpr=limitFlag] {
                [Operator=ASSIGN]
                [NameExpr=limitFlag]
                [BooleanLiteralExpr=true]
              }
            }
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]

Location: 30|9
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]
Location: 26|9
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private boolean limitFlag;
    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
        i<span class="deletion" data-tooltip="This code may be incorrect.">f (limit == 24){ 
            limitFlag= true;
        }else{
            limitFlag= false;
        }</span>
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {   
        if (limitFlag=true){
        if((replacementValue >=0)&& (replacementValue < limit)){
            value = replacementValue;
        }
        }else{
        
        if((replacementValue >0) && (replacementValue < 12)) {
            value = replacementValue;
        }
        
        if((replacementValue >12) &&(replacementValue < 24)){
            value = replacementValue -12;
        }
    }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
     value = (value + 1) % limit;
    }
}

Target
      public void increment()
      {
-      value = (value + 1) % limit;
+         value = (value + 1) % limit;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
     value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return  value + "";
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }else{
            System.out.println("Vekeerde waarde ingevoerd.");
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
          }
          else {
-             return  value + "";
+             return "" + value;
          }
      }
  
...
          if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
-         }else{
-             System.out.println("Vekeerde waarde ingevoerd.");
          }
      }
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return  value + "";
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }else{
            System.out.println("Vekeerde waarde ingevoerd.");
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private int value24;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }
    
    public String getAMorPM()
    {
        if(value24 < 12) {
            return "am";
        }
        else {
            return "pm";
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        value24 = replacementValue;
        if(replacementValue >= limit + 1) {
            value = replacementValue % limit;
        }
        else {
            value = replacementValue;
        }
            
        /*if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }*/
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}

Target
      private int limit;
      private int value;
-     private int value24;
  
      /**
       * Constructor for objects of class NumberDisplay.
...
          }
      }
-     
-     public String getAMorPM()
-     {
-         if(value24 < 12) {
-             return "am";
-         }
-         else {
-             return "pm";
-         }
-     }
  
      /**
       * Set the value of the display to the new specified value. If the new
...
      public void setValue(int replacementValue)
      {
-         value24 = replacementValue;
-         if(replacementValue >= limit + 1) {
-             value = replacementValue % limit;
-         }
-         else {
+         if((replacementValue >= 0) && (replacementValue < limit)) {
              value = replacementValue;
          }
-             
-         /*if((replacementValue >= 0) && (replacementValue < limit)) {
-             value = replacementValue;
-         }*/
      }
  
...

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=NumberDisplay] {
    [FieldDeclaration=limit] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=limit] {
        [PrimitiveType=]
      }
    }
    [ConstructorDeclaration=NumberDisplay] {
      [Parameter=rollOverLimit]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=limit]
          }
        }
      }
    }
    [MethodDeclaration=getValue] {
      [PrimitiveType=]
      [BlockStmt=value] {
        [ReturnStmt=value] {
          [NameExpr=value]
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
rollOverLimit <-> rollOverLimit
limit <-> limit
value <-> value
-- [MethodDeclaration] --
getValue <-> getValue


/**
 * ### ############# ##### ########## # ####### ###### ####### #### ### ####
 * ###### #### #### ## # ##### #####. ### ##### ### ## ######### #### ########
 * ### #######. ### ###### ##### #### #### (#########) ## #####-#. ## ####,
 * ### #######, ### ### ####### ## # ####### #####, ### ##### ##### ## ##, 
 * ######### ## ####### ###### #### # ## ##. #### ###########, ### ####### 
 * ############# ##### #### ## #### #### ######## ### #####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class NumberDisplay
{
    private int limit;
    private int value;
    private int value24;

    /**
     * Constructor for objects of class NumberDisplay.
     * Set the limit at which the display rolls over.
     */
    public NumberDisplay(int rollOverLimit)
    {
        limit = rollOverLimit;
        value = 0;
    }

    /**
     * Return the current value.
     */
    public int getValue()
    {
        return value;
    }

    /**
     * Return the display value (that is, the current value as a two-digit
     * String. If the value is less than ten, it will be padded with a leading
     * zero).
     */
    public String getDisplayValue()
    {
        if(value < 10) {
            return "0" + value;
        }
        else {
            return "" + value;
        }
    }
    
    public String getAMorPM()
    {
        if(value24 < 12) {
            return "am";
        }
        else {
            return "pm";
        }
    }

    /**
     * Set the value of the display to the new specified value. If the new
     * value is less than zero or over the limit, do nothing.
     */
    public void setValue(int replacementValue)
    {
        value24 = replacementValue;
        if(replacementValue >= limit + 1) {
            value = replacementValue % limit;
        }
        else {
            value = replacementValue;
        }
            
        /*if((replacementValue >= 0) && (replacementValue < limit)) {
            value = replacementValue;
        }*/
    }

    /**
     * Increment the display value by one, rolling over to zero if the
     * limit is reached.
     */
    public void increment()
    {
        value = (value + 1) % limit;
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        if(hours.getValue() == 0)
        {
            displayString = Integer.toString(hours.getValue() + 1) + ":" +
            minutes.getDisplayValue();
        }
        
        else if(hours.getValue() == 12)
        {
            displayString = hours.getValue() + ":" +
            minutes.getDisplayValue();
        }
        else if(hours.getValue() >= 13 && hours.getValue() < 25)
        {
            displayString = Integer.toString(hours.getValue() - 12) + ":" + 
            minutes.getDisplayValue();
        }
        else
        {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
        }
    }
}

Target
      {
          hours = new NumberDisplay(24);
-         
          minutes = new NumberDisplay(60);
          updateDisplay();
      }
...
      {
          hours = new NumberDisplay(24);
-         
          minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
...
      {
          hours.setValue(hour);
-         
          minutes.setValue(minute);
          updateDisplay();
      }
...
      private void updateDisplay()
      {
-         if(hours.getValue() == 0)
-         {
-             displayString = Integer.toString(hours.getValue() + 1) + ":" +
-             minutes.getDisplayValue();
-         }
+         int hour = hours.getValue();
+         String suffix;
          
-         else if(hours.getValue() == 12)
-         {
-             displayString = hours.getValue() + ":" +
-             minutes.getDisplayValue();
+         if(hour >= 12) {
+             suffix = "pm";
          }
-         else if(hours.getValue() >= 13 && hours.getValue() < 25)
-         {
-             displayString = Integer.toString(hours.getValue() - 12) + ":" + 
-             minutes.getDisplayValue();
+         else {
+             suffix = "am";
          }
-         else
-         {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         if(hour >= 12) {
+             hour -= 12;
          }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        if(hours.getValue() == 0)
        {
            displayString = Integer.toString(hours.getValue() + 1) + ":" +
            minutes.getDisplayValue();
        }
        
        else if(hours.getValue() == 12)
        {
            displayString = hours.getValue() + ":" +
            minutes.getDisplayValue();
        }
        else if(hours.getValue() >= 13 && hours.getValue() < 25)
        {
            displayString = Integer.toString(hours.getValue() - 12) + ":" + 
            minutes.getDisplayValue();
        }
        else
        {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
        }
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        if(hours.getValue()>12){ 
            displayString = "0" + (hours.getValue()-12);
            
        }
        else if(hours.getValue() == 0){
            displayString = "" + (hours.getValue()+12);
        }
        else{
            displayString = hours.getDisplayValue();
        }
        displayString = displayString + ":" +
                        minutes.getDisplayValue();
    }
}

Target
      private void updateDisplay()
      {
-         if(hours.getValue()>12){ 
-             displayString = "0" + (hours.getValue()-12);
-             
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
          }
-         else if(hours.getValue() == 0){
-             displayString = "" + (hours.getValue()+12);
+         else {
+             suffix = "am";
          }
-         else{
-             displayString = hours.getDisplayValue();
+         if(hour >= 12) {
+             hour -= 12;
          }
-         displayString = displayString + ":" +
-                         minutes.getDisplayValue();
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        if(hours.getValue()>12){ 
            displayString = "0" + (hours.getValue()-12);
            
        }
        else if(hours.getValue() == 0){
            displayString = "" + (hours.getValue()+12);
        }
        else{
            displayString = hours.getDisplayValue();
        }
        displayString = displayString + ":" +
                        minutes.getDisplayValue();
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      public ClockDisplay()
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          updateDisplay();
      }
...
      public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=12]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]

Location: 27|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 27|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">2</span>);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);  //Can we just call ClockDisplay here??
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(24);  //Can we just call ClockDisplay here??
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);  //Can we just call ClockDisplay here??
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private boolean am;
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(13);
        minutes = new NumberDisplay(60);
        am = true;
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(13);
        minutes = new NumberDisplay(60);
        if (hour <= 12 && hour > 0) { // set the am variable 
            am = true;
        }
        else {
            am = false;
        }
        setTime(hour % 13, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        if (hours.getValue() == 0) {   // it skipped the 0 as it doesn t exist in AM
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
        
        if ( am == true){
            displayString += "am";
        }
        else {
            displayString += "pm";
        }
    }
}

Target
      private NumberDisplay minutes;
      private String displayString;    // simulates the actual display
-     private boolean am;
      
      /**
       * Constructor for ClockDisplay objects. This constructor 
...
      public ClockDisplay()
      {
-         hours = new NumberDisplay(13);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
-         am = true;
          updateDisplay();
      }
  
...
      public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(13);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
-         if (hour <= 12 && hour > 0) { // set the am variable 
-             am = true;
-         }
-         else {
-             am = false;
-         }
-         setTime(hour % 13, minute);
+         setTime(hour, minute);
      }
  
      /**
...
              hours.increment();
          }
-         if (hours.getValue() == 0) {   // it skipped the 0 as it doesn t exist in AM
-             hours.increment();
-         }
          updateDisplay();
      }
  
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
          
-         if ( am == true){
-             displayString += "am";
+         if(hour >= 12) {
+             suffix = "pm";
          }
          else {
-             displayString += "pm";
+             suffix = "am";
          }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=13]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:13] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]

Location: 28|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:13] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 28|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:13] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private boolean am;
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">3</span>);
        minutes = new NumberDisplay(60);
        am = true;
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(13);
        minutes = new NumberDisplay(60);
        if (hour <= 12 && hour > 0) { // set the am variable 
            am = true;
        }
        else {
            am = false;
        }
        setTime(hour % 13, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        if (hours.getValue() == 0) {   // it skipped the 0 as it doesn t exist in AM
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
        
        if ( am == true){
            displayString += "am";
        }
        else {
            displayString += "pm";
        }
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private boolean timeHalf=true;//true is am
    //private String Times[];
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(12);//set to 12 instead of 24
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);//set to 12 instead of 24
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        if(hours.getValue()==0 && minutes.getValue()==0){ // hours and minutes just rolled over
            timeHalf=!timeHalf;//Change the half of the day
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        
        String meridiem;
        if(timeHalf){
            meridiem="AM";
        }else{  
            meridiem="PM";
        }
        String hoursString=hours.getDisplayValue();//set to the hour value
        
        if(meridiem=="PM"&&Integer.parseInt(hours.getDisplayValue())==0){
            hoursString="12";
        }//Change to 12:xx if it is 00:xx and pm
        
        displayString = hoursString + ":" + 
                        minutes.getDisplayValue()+" "+meridiem;//display it all

}   
}

Target
      private NumberDisplay hours;
      private NumberDisplay minutes;
-     private String displayString;    // simulates the actual display
-     private boolean timeHalf=true;//true is am
-     //private String Times[];
+     private String displayString; 
+     private String AmOrPm;
+     // simulates the actual display
+     
      /**
       * Constructor for ClockDisplay objects. This constructor 
       * creates a new clock set at 00:00.
...
      public ClockDisplay()
      {
-         hours = new NumberDisplay(12);//set to 12 instead of 24
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          updateDisplay();
      }
...
      public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(12);//set to 12 instead of 24
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
...
              hours.increment();
          }
-         if(hours.getValue()==0 && minutes.getValue()==0){ // hours and minutes just rolled over
-             timeHalf=!timeHalf;//Change the half of the day
-         }
          updateDisplay();
      }
  
...
       */
      private void updateDisplay()
-     {
+     {   if (hours.getValue() >= 12){
+         AmOrPm = "pm";
+     }else{
+         AmOrPm = "am";
+     }
          
-         String meridiem;
-         if(timeHalf){
-             meridiem="AM";
-         }else{  
-             meridiem="PM";
+         if(hours.getValue() > 12){
+             int newHours;
+             newHours = hours.getValue() -12;
+             hours.setValue(newHours);
+             
          }
-         String hoursString=hours.getDisplayValue();//set to the hour value
          
-         if(meridiem=="PM"&&Integer.parseInt(hours.getDisplayValue())==0){
-             hoursString="12";
-         }//Change to 12:xx if it is 00:xx and pm
          
-         displayString = hoursString + ":" + 
-                         minutes.getDisplayValue()+" "+meridiem;//display it all
- 
- }   
+         displayString = hours.getDisplayValue() + ":" + 
+                         minutes.getDisplayValue() + AmOrPm;
+     }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=12]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
    [LineComment=]
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]

Location: 28|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 28|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private boolean timeHalf=true;//true is am
    //private String Times[];
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">2</span>);//set to 12 instead of 24
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);//set to 12 instead of 24
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        if(hours.getValue()==0 && minutes.getValue()==0){ // hours and minutes just rolled over
            timeHalf=!timeHalf;//Change the half of the day
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        
        String meridiem;
        if(timeHalf){
            meridiem="AM";
        }else{  
            meridiem="PM";
        }
        String hoursString=hours.getDisplayValue();//set to the hour value
        
        if(meridiem=="PM"&&Integer.parseInt(hours.getDisplayValue())==0){
            hoursString="12";
        }//Change to 12:xx if it is 00:xx and pm
        
        displayString = hoursString + ":" + 
                        minutes.getDisplayValue()+" "+meridiem;//display it all

}   
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      public ClockDisplay()
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          updateDisplay();
      }
...
      public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=12]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]

Location: 27|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 27|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">2</span>);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ######## ####### ## ## #### ##### ## ####### #######.
 * #### ########## ## # ## #### ##### #### ######## 
 * ## ### ### "##" ### "##" ##########.
 * 
 * ## ######### #### @########
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private boolean morning;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(12, 1);
        minutes = new NumberDisplay(60, 0);
        morning = true;
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute, boolean am)
    {
        hours = new NumberDisplay(12, 1);
        minutes = new NumberDisplay(60, 0);
        setTime(hour, minute, am);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        if(hours.getValue() == hours.getMin() ) {
            morning = !morning;
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute, boolean am)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        morning = am;
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        if(morning){
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + "am";
        }
        else{
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + "pm"; 
        }            
    }
}

Target
  
  /**
-  * ######## ####### ## ## #### ##### ## ####### #######.
-  * #### ########## ## # ## #### ##### #### ######## 
-  * ## ### ### "##" ### "##" ##########.
+  * ### ############ ##### ########## # ####### ##### ####### ### #
+  * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
+  * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
+  * ########).
   * 
-  * ## ######### #### @########
+  * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
+  * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
+  * #######: ### #### ########## #### ### ####### #### #### ## ####.
+  * 
+  * @###### ####### ####### ### ##### #. ######
+  * @####### ####.##.##
   */
  public class ClockDisplay
  {
...
      private NumberDisplay hours;
      private NumberDisplay minutes;
-     private boolean morning;
      private String displayString;    // simulates the actual display
      
      /**
...
      public ClockDisplay()
      {
-         hours = new NumberDisplay(12, 1);
-         minutes = new NumberDisplay(60, 0);
-         morning = true;
+         hours = new NumberDisplay(24);
+         minutes = new NumberDisplay(60);
          updateDisplay();
      }
  
...
       * parameters.
       */
-     public ClockDisplay(int hour, int minute, boolean am)
+     public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(12, 1);
-         minutes = new NumberDisplay(60, 0);
-         setTime(hour, minute, am);
+         hours = new NumberDisplay(24);
+         minutes = new NumberDisplay(60);
+         setTime(hour, minute);
      }
  
      /**
...
              hours.increment();
          }
-         if(hours.getValue() == hours.getMin() ) {
-             morning = !morning;
-         }
          updateDisplay();
      }
  
...
       * minute.
       */
-     public void setTime(int hour, int minute, boolean am)
+     public void setTime(int hour, int minute)
      {
          hours.setValue(hour);
          minutes.setValue(minute);
-         morning = am;
          updateDisplay();
      }
  
...
      private void updateDisplay()
      {
-         if(morning){
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue() + "am";
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
          }
-         else{
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue() + "pm"; 
-         }            
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=12]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]

Location: 22|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 22|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ######## ####### ## ## #### ##### ## ####### #######.
 * #### ########## ## # ## #### ##### #### ######## 
 * ## ### ### "##" ### "##" ##########.
 * 
 * ## ######### #### @########
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private boolean morning;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">2</span>, 1);
        minutes = new NumberDisplay(60, 0);
        morning = true;
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute, boolean am)
    {
        hours = new NumberDisplay(12, 1);
        minutes = new NumberDisplay(60, 0);
        setTime(hour, minute, am);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        if(hours.getValue() == hours.getMin() ) {
            morning = !morning;
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute, boolean am)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        morning = am;
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        if(morning){
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + "am";
        }
        else{
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + "pm"; 
        }            
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private String amOrpm;
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        String h, m;
        int hour = hours.getDisplayValue();
        int min = minutes.getDisplayValue();
        
        if(hour > 12){
            hour -= 12;
            amOrpm = "PM";
        } else {
            amOrpm = "AM";
        }
        
        if(hour < 10){
            h = "0" + hours;
        } else {
            h = "" + hours;
        }
        
        if(min  < 10){
            m = "0" + minutes;
        } else {
            m = "" + min;
        }
        
        displayString  = h + ":" + m + " " + amOrpm;
    }
}

Target
      private NumberDisplay minutes;
      private String displayString;    // simulates the actual display
-     private String amOrpm;
      
      /**
       * Constructor for ClockDisplay objects. This constructor 
...
      private void updateDisplay()
      {
-         String h, m;
-         int hour = hours.getDisplayValue();
-         int min = minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
          
-         if(hour > 12){
-             hour -= 12;
-             amOrpm = "PM";
-         } else {
-             amOrpm = "AM";
+         if(hour >= 12) {
+             suffix = "pm";
          }
-         
-         if(hour < 10){
-             h = "0" + hours;
-         } else {
-             h = "" + hours;
+         else {
+             suffix = "am";
          }
-         
-         if(min  < 10){
-             m = "0" + minutes;
-         } else {
-             m = "" + min;
+         if(hour >= 12) {
+             hour -= 12;
          }
-         
-         displayString  = h + ":" + m + " " + amOrpm;
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private String amOrpm;
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        String h, m;
        int hour = hours.getDisplayValue();
        int min = minutes.getDisplayValue();
        
        if(hour > 12){
            hour -= 12;
            amOrpm = "PM";
        } else {
            amOrpm = "AM";
        }
        
        if(hour < 10){
            h = "0" + hours;
        } else {
            h = "" + hours;
        }
        
        if(min  < 10){
            m = "0" + minutes;
        } else {
            m = "" + min;
        }
        
        displayString  = h + ":" + m + " " + amOrpm;
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */

public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        int newDisplay = hours.getValue()-12;
        if (newDisplay < 0) {
            newDisplay *= -1;
            displayString = newDisplay + "am";
        }
        else {
            displayString = newDisplay + "pm";
        }
        String minutesDisplay = ""+minutes.getValue();
        if (minutes.getValue() < 10) {
            minutesDisplay = "0" + minutes.getValue(); 
        }
       String display = displayString + ":" +minutesDisplay;
       
       System.out.println(display);
                        
             
    }
}

Target
   * @####### ####.##.##
   */
- 
  public class ClockDisplay
  {
      private NumberDisplay hours;
...
      private void updateDisplay()
      {
-         int newDisplay = hours.getValue()-12;
-         if (newDisplay < 0) {
-             newDisplay *= -1;
-             displayString = newDisplay + "am";
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
          }
          else {
-             displayString = newDisplay + "pm";
+             suffix = "am";
          }
-         String minutesDisplay = ""+minutes.getValue();
-         if (minutes.getValue() < 10) {
-             minutesDisplay = "0" + minutes.getValue(); 
+         if(hour >= 12) {
+             hour -= 12;
          }
-        String display = displayString + ":" +minutesDisplay;
-        
-        System.out.println(display);
-                         
-              
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
  [JavadocComment=]
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
d: CompilationUnit: [ClassOrInterfaceDeclaration:ClockDisplay, JavadocComment:] -> [ClassOrInterfaceDeclaration:ClockDisplay]

Location: 14|3
EditHint (DELETION):
d: CompilationUnit: [ClassOrInterfaceDeclaration:ClockDisplay, JavadocComment:] -> [ClassOrInterfaceDeclaration:ClockDisplay]
Location: 2|1
EditHint (DELETION):
d: CompilationUnit: [ClassOrInterfaceDeclaration:ClockDisplay, JavadocComment:] -> [ClassOrInterfaceDeclaration:ClockDisplay]

/<span class="deletion" data-tooltip="This code may be incorrect.">**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */</span>

public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        int newDisplay = hours.getValue()-12;
        if (newDisplay < 0) {
            newDisplay *= -1;
            displayString = newDisplay + "am";
        }
        else {
            displayString = newDisplay + "pm";
        }
        String minutesDisplay = ""+minutes.getValue();
        if (minutes.getValue() < 10) {
            minutesDisplay = "0" + minutes.getValue(); 
        }
       String display = displayString + ":" +minutesDisplay;
       
       System.out.println(display);
                        
             
    }
}

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     * Implementes a 12 hour clock
     */
    private void updateDisplay()
    {
        if ((hours.getValue() > 12)){
            if (minutes.getValue() <10){
                displayString = "0" + (hours.getValue()-12) + ":" + 
                        minutes.getValue() + "0 pm";
            }else{
                displayString = "0" + (hours.getValue()-12) + ":" + 
                        minutes.getValue() + " pm";
            }          
        }else{
            if (minutes.getValue() < 10){
               displayString = hours.getValue() + ":" + 
                        minutes.getValue() + "0 am"; 
            }else{
                displayString = hours.getValue() + ":" + 
                        minutes.getValue() + " am"; 
            } 
        }     
    }
}

Target
      /**
       * Update the internal string that represents the display.
-      * Implementes a 12 hour clock
       */
      private void updateDisplay()
      {
-         if ((hours.getValue() > 12)){
-             if (minutes.getValue() <10){
-                 displayString = "0" + (hours.getValue()-12) + ":" + 
-                         minutes.getValue() + "0 pm";
-             }else{
-                 displayString = "0" + (hours.getValue()-12) + ":" + 
-                         minutes.getValue() + " pm";
-             }          
-         }else{
-             if (minutes.getValue() < 10){
-                displayString = hours.getValue() + ":" + 
-                         minutes.getValue() + "0 am"; 
-             }else{
-                 displayString = hours.getValue() + ":" + 
-                         minutes.getValue() + " am"; 
-             } 
-         }     
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     * Implementes a 12 hour clock
     */
    private void updateDisplay()
    {
        if ((hours.getValue() > 12)){
            if (minutes.getValue() <10){
                displayString = "0" + (hours.getValue()-12) + ":" + 
                        minutes.getValue() + "0 pm";
            }else{
                displayString = "0" + (hours.getValue()-12) + ":" + 
                        minutes.getValue() + " pm";
            }          
        }else{
            if (minutes.getValue() < 10){
               displayString = hours.getValue() + ":" + 
                        minutes.getValue() + "0 am"; 
            }else{
                displayString = hours.getValue() + ":" + 
                        minutes.getValue() + " am"; 
            } 
        }     
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private String ampm;
    public static final String am = "a.m.";
    public static final String pm = "p.m.";
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      private NumberDisplay minutes;
      private String displayString;    // simulates the actual display
-     private String ampm;
-     public static final String am = "a.m.";
-     public static final String pm = "p.m.";
      
      /**
       * Constructor for ClockDisplay objects. This constructor 
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private String ampm;
    public static final String am = "a.m.";
    public static final String pm = "p.m.";
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(13) ;
        minutes = new NumberDisplay(60);       
         if(hours.getValue() == 0){
            hours.setValue(1);
        }
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(13);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        /**
         * When it would roll over from 12 to 0, this makes it 
         * roll over to 1 instead.
         */
        if(hours.getValue() == 0){
            hours.setValue(1);
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      public ClockDisplay()
      {
-         hours = new NumberDisplay(13) ;
-         minutes = new NumberDisplay(60);       
-          if(hours.getValue() == 0){
-             hours.setValue(1);
-         }
+         hours = new NumberDisplay(24);
+         minutes = new NumberDisplay(60);
          updateDisplay();
      }
  
...
      public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(13);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
...
              hours.increment();
          }
-         /**
-          * When it would roll over from 12 to 0, this makes it 
-          * roll over to 1 instead.
-          */
-         if(hours.getValue() == 0){
-             hours.setValue(1);
-         }
          updateDisplay();
      }
  
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=13]
            }
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=hours]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=setValue] {
                [NameExpr=hours]
                [IntegerLiteralExpr=1]
              }
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:13] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]

Location: 31|9
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]
Location: 29|10
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]
Location: 27|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:13] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 27|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:13] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">3</span>) ;
        minutes = new NumberDisplay(60);       
         i<span class="deletion" data-tooltip="This code may be incorrect.">f(hours.getValue() == 0){
            hours.setValue(1);
        }</span>
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(13);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        /**
         * When it would roll over from 12 to 0, this makes it 
         * roll over to 1 instead.
         */
        if(hours.getValue() == 0){
            hours.setValue(1);
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(13);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(13);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        if(hours.getValue() == 0) {hours.increment();}
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      public ClockDisplay()
      {
-         hours = new NumberDisplay(13);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          updateDisplay();
      }
...
      public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(13);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
...
              hours.increment();
          }
-         if(hours.getValue() == 0) {hours.increment();}
          updateDisplay();
      }
  
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=13]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:13] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]

Location: 27|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:13] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 27|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:13] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">3</span>);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(13);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        if(hours.getValue() == 0) {hours.increment();}
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {  
        if(hour < 12 )
        {   
           hours = new NumberDisplay(12); 
        }else if(hour >12 && hour < 24)
        {
            hour = hour - 12;
            hours = new NumberDisplay(12);
        }else if( hour >= 24)
        {
            hours = new NumberDisplay(12);
        }
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      public ClockDisplay()
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          updateDisplay();
      }
...
       */
      public ClockDisplay(int hour, int minute)
-     {  
-         if(hour < 12 )
-         {   
-            hours = new NumberDisplay(12); 
-         }else if(hour >12 && hour < 24)
-         {
-             hour = hour - 12;
-             hours = new NumberDisplay(12);
-         }else if( hour >= 24)
-         {
-             hours = new NumberDisplay(12);
-         }
+     {
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=12]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]

Location: 27|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 27|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">2</span>);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {  
        if(hour < 12 )
        {   
           hours = new NumberDisplay(12); 
        }else if(hour >12 && hour < 24)
        {
            hour = hour - 12;
            hours = new NumberDisplay(12);
        }else if( hour >= 24)
        {
            hours = new NumberDisplay(12);
        }
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private boolean Ampm;
    

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute, boolean Ampm)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        this.Ampm = Ampm;
        setTime(hour, minute);
    }
    
    public String getAmpm()
    {
        if(Ampm == true)
        {
            return "AM";
        }
        else
        {
            return "PM";
        }
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + getAmpm();
    }
}

Target
      private NumberDisplay minutes;
      private String displayString;    // simulates the actual display
-     private boolean Ampm;
      
+     /**
+      * Constructor for ClockDisplay objects. This constructor 
+      * creates a new clock set at 00:00.
+      */
+     public ClockDisplay()
+     {
+         hours = new NumberDisplay(24);
+         minutes = new NumberDisplay(60);
+         updateDisplay();
+     }
  
      /**
       * Constructor for ClockDisplay objects. This constructor
...
       * parameters.
       */
-     public ClockDisplay(int hour, int minute, boolean Ampm)
+     public ClockDisplay(int hour, int minute)
      {
          hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
-         this.Ampm = Ampm;
          setTime(hour, minute);
      }
-     
-     public String getAmpm()
-     {
-         if(Ampm == true)
-         {
-             return "AM";
-         }
-         else
-         {
-             return "PM";
-         }
-     }
  
      /**
       * This method should get called once every minute - it makes
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue() + getAmpm();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [Parameter=hour]([Modifier=[]], [PrimitiveType=])
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=getAmpm] {
      [ClassOrInterfaceType=String]
      [BlockStmt=Ampm] {
        [IfStmt=Ampm] {
          [BinaryExpr=Ampm] {
            [Operator=EQUALS]
            [NameExpr=Ampm]
            [BooleanLiteralExpr=true]
          }
          [BlockStmt=] {
            [ReturnStmt=] {
              [StringLiteralExpr="AM"]
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
hour <-> minutes
-- [MethodDeclaration] --
getAmpm <-> timeTick
r: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration: [Parameter:hour, BlockStmt:] -> [BlockStmt:, Parameter:hour]
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [ClassOrInterfaceType:String, BlockStmt:Ampm] -> [ClassOrInterfaceType:String, BlockStmt:] w/ CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [ClassOrInterfaceType:String, BlockStmt:Ampm] -> [VoidType:, BlockStmt:Ampm]
i: {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BinaryExpr}: [MethodCallExpr:getValue, IntegerLiteralExpr:0] -> [Operator:EQUALS, MethodCallExpr:getValue, IntegerLiteralExpr:0] w/ {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BinaryExpr->Operator}
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration: [Parameter:hour, BlockStmt:] -> [BlockStmt:]

Location: 46|5
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [ClassOrInterfaceType:String, BlockStmt:Ampm] -> [ClassOrInterfaceType:String, BlockStmt:] w/ CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt
Location: 37|5
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [ClassOrInterfaceType:String, BlockStmt:Ampm] -> [ClassOrInterfaceType:String, BlockStmt:] w/ CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt
some code
some code
Location: 36|17
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [ClassOrInterfaceType:String, BlockStmt:Ampm] -> [VoidType:, BlockStmt:Ampm]
Location: 36|12
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [ClassOrInterfaceType:String, BlockStmt:Ampm] -> [VoidType:, BlockStmt:Ampm]
Location: 34|5
EditHint (REORDER):
r: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration: [Parameter:hour, BlockStmt:] -> [BlockStmt:, Parameter:hour]
Location: 29|5
EditHint (REORDER):
r: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration: [Parameter:hour, BlockStmt:] -> [BlockStmt:, Parameter:hour]
Location: 28|32
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration: [Parameter:hour, BlockStmt:] -> [BlockStmt:]
Location: 28|25
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration: [Parameter:hour, BlockStmt:] -> [BlockStmt:]

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private boolean Ampm;
    

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(i<span class="deletion" data-tooltip="This code may be incorrect.">nt hour</span>, int minute, boolean Ampm)
    {<span class="reorder" data-tooltip="This code is good, but it may be in the wrong place.">
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        this.Ampm = Ampm;
        setTime(hour, minute);
    }</span>
    
    public S<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">tring</span> getAmpm()
    {<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">
        if(Ampm == true)
        {
            return "AM";
        }
        else
        {
            return "PM";
        }
    }</span>

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + getAmpm();
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ## #### #####. ### ##### ##### ##### ### #######, ## ### ##
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private boolean am;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 12:00am.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        am = true;
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute, boolean am)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        this.am = am;
        setTime(hour, minute, am);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
            if((hours.getValue() == 0) && (minutes.getValue() >= 0) && (am == true)){//gotta be 12
                am = false;
            } else if ((hours.getValue() == 0) && (minutes.getValue() >= 0) && (am == false)) {//more than or equal to 0
                am = true;
            }
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute, am or pm.
     */
    public void setTime(int hour, int minute, boolean am)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        this.am = am;
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        //displays am or pm depending on bool 'am'
        String amString;
        if(am) {
        amString = "am";
    } else {
        amString = "pm";
    }
        
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + amString;
    }
}

Target
  /**
   * ### ############ ##### ########## # ####### ##### ####### ### #
-  * ## #### #####. ### ##### ##### ##### ### #######, ## ### ##
+  * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
+  * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
+  * ########).
   * 
   * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
   * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
...
      private NumberDisplay hours;
      private NumberDisplay minutes;
-     private boolean am;
      private String displayString;    // simulates the actual display
      
      /**
...
       * Constructor for ClockDisplay objects. This constructor 
-      * creates a new clock set at 12:00am.
+      * creates a new clock set at 00:00.
       */
      public ClockDisplay()
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
-         am = true;
          updateDisplay();
      }
  
...
       * parameters.
       */
-     public ClockDisplay(int hour, int minute, boolean am)
+     public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
-         this.am = am;
-         setTime(hour, minute, am);
+         setTime(hour, minute);
      }
  
      /**
...
          if(minutes.getValue() == 0) {  // it just rolled over!
              hours.increment();
-             if((hours.getValue() == 0) && (minutes.getValue() >= 0) && (am == true)){//gotta be 12
-                 am = false;
-             } else if ((hours.getValue() == 0) && (minutes.getValue() >= 0) && (am == false)) {//more than or equal to 0
-                 am = true;
-             }
          }
          updateDisplay();
      }
...
      /**
       * Set the time of the display to the specified hour and
-      * minute, am or pm.
+      * minute.
       */
-     public void setTime(int hour, int minute, boolean am)
+     public void setTime(int hour, int minute)
      {
          hours.setValue(hour);
          minutes.setValue(minute);
-         this.am = am;
          updateDisplay();
      }
  
...
      private void updateDisplay()
      {
-         //displays am or pm depending on bool 'am'
-         String amString;
-         if(am) {
-         amString = "am";
-     } else {
-         amString = "pm";
-     }
+         int hour = hours.getValue();
+         String suffix;
          
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue() + amString;
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=12]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
            [IfStmt=] {
              [BinaryExpr=] {
                [Operator=AND]
                [BinaryExpr=] {
                  [Operator=AND]
                  [EnclosedExpr=] {
                    [BinaryExpr=] {
                      [Operator=EQUALS]
                      [MethodCallExpr=getValue] {
                        [NameExpr=hours]
                      }
                      [IntegerLiteralExpr=0]
                    }
                  }
                }
                [EnclosedExpr=am] {
                  [BinaryExpr=am] {
                    [Operator=EQUALS]
                    [NameExpr=am]
                    [BooleanLiteralExpr=true]
                  }
                }
              }
              [BlockStmt=am] {
                [ExpressionStmt=am] {
                  [AssignExpr=am] {
                    [Operator=ASSIGN]
                    [NameExpr=am]
                    [BooleanLiteralExpr=false]
                  }
                }
              }
              [IfStmt=] {
                [BinaryExpr=] {
                  [Operator=AND]
                  [BinaryExpr=] {
                    [Operator=AND]
                    [EnclosedExpr=] {
                      [BinaryExpr=] {
                        [Operator=EQUALS]
                        [MethodCallExpr=getValue] {
                          [NameExpr=hours]
                        }
                        [IntegerLiteralExpr=0]
                      }
                    }
                  }
                  [EnclosedExpr=am] {
                    [BinaryExpr=am] {
                      [Operator=EQUALS]
                      [NameExpr=am]
                      [BooleanLiteralExpr=false]
                    }
                  }
                }
                [BlockStmt=am] {
                  [ExpressionStmt=am] {
                    [AssignExpr=am] {
                      [Operator=ASSIGN]
                      [NameExpr=am]
                      [BooleanLiteralExpr=true]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]

Location: 58|13
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]
Location: 54|13
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]
Location: 26|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 26|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ## #### #####. ### ##### ##### ##### ### #######, ## ### ##
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private boolean am;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 12:00am.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">2</span>);
        minutes = new NumberDisplay(60);
        am = true;
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute, boolean am)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        this.am = am;
        setTime(hour, minute, am);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
            i<span class="deletion" data-tooltip="This code may be incorrect.">f((hours.getValue() == 0) && (minutes.getValue() >= 0) && (am == true)){//gotta be 12
                am = false;
            } else if ((hours.getValue() == 0) && (minutes.getValue() >= 0) && (am == false)) {//more than or equal to 0
                am = true;
            }</span>
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute, am or pm.
     */
    public void setTime(int hour, int minute, boolean am)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        this.am = am;
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        //displays am or pm depending on bool 'am'
        String amString;
        if(am) {
        amString = "am";
    } else {
        amString = "pm";
    }
        
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + amString;
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        if(hours.getValue()>12)
        {
           
            displayString= (hours.getValue()-12) + ":" + 
             minutes.getDisplayValue() + " pm";
        }
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      public String getTime()
      {
-         if(hours.getValue()>12)
-         {
-            
-             displayString= (hours.getValue()-12) + ":" + 
-              minutes.getDisplayValue() + " pm";
-         }
          return displayString;
      }
      
...
      private void updateDisplay()
      {
+         int hour = hours.getValue();
+         String suffix;
          
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        if(hours.getValue()>12)
        {
           
            displayString= (hours.getValue()-12) + ":" + 
             minutes.getDisplayValue() + " pm";
        }
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ## #### #####. ### ##### ##### ##### ### #######.
 *
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######.
 *
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }

    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        int hour = hours.getValue();
        if(hour <= 12){
            if(hour == 0){
            displayString = hour + 12 + ":" +
                        minutes.getDisplayValue() + "am";}
                        else{    displayString = hour  + ":" +
                        minutes.getDisplayValue() + "am";}
                    }
        else{
            displayString = hour -12 + ":" +
                        minutes.getDisplayValue() + "pm";
        }


    }
}

Target
  /**
   * ### ############ ##### ########## # ####### ##### ####### ### #
-  * ## #### #####. ### ##### ##### ##### ### #######.
-  *
+  * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
+  * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
+  * ########).
+  * 
   * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
-  * ### ###### ## ############ ### #######.
-  *
+  * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
+  * #######: ### #### ########## #### ### ####### #### #### ## ####.
+  * 
   * @###### ####### ####### ### ##### #. ######
   * @####### ####.##.##
   */
...
      private NumberDisplay minutes;
      private String displayString;    // simulates the actual display
- 
+     
      /**
-      * Constructor for ClockDisplay objects. This constructor
+      * Constructor for ClockDisplay objects. This constructor 
       * creates a new clock set at 00:00.
       */
      public ClockDisplay()
...
      /**
       * Constructor for ClockDisplay objects. This constructor
-      * creates a new clock set at the time specified by the
+      * creates a new clock set at the time specified by the 
       * parameters.
       */
      public ClockDisplay(int hour, int minute)
...
          return displayString;
      }
- 
+     
      /**
       * Update the internal string that represents the display.
       */
...
      {
          int hour = hours.getValue();
-         if(hour <= 12){
-             if(hour == 0){
-             displayString = hour + 12 + ":" +
-                         minutes.getDisplayValue() + "am";}
-                         else{    displayString = hour  + ":" +
-                         minutes.getDisplayValue() + "am";}
-                     }
-         else{
-             displayString = hour -12 + ":" +
-                         minutes.getDisplayValue() + "pm";
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
          }
- 
- 
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ## #### #####. ### ##### ##### ##### ### #######.
 *
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######.
 *
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }

    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        int hour = hours.getValue();
        if(hour <= 12){
            if(hour == 0){
            displayString = hour + 12 + ":" +
                        minutes.getDisplayValue() + "am";}
                        else{    displayString = hour  + ":" +
                        minutes.getDisplayValue() + "am";}
                    }
        else{
            displayString = hour -12 + ":" +
                        minutes.getDisplayValue() + "pm";
        }


    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(59);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(59);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      public ClockDisplay()
      {
-         hours = new NumberDisplay(12);
-         minutes = new NumberDisplay(59);
+         hours = new NumberDisplay(24);
+         minutes = new NumberDisplay(60);
          updateDisplay();
      }
  
...
      public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(12);
-         minutes = new NumberDisplay(59);
+         hours = new NumberDisplay(24);
+         minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
  
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=12]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]

Location: 27|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 27|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">2</span>);
        minutes = new NumberDisplay(59);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(59);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();       
        if(minutes.getValue() == 0){
            hours.increment();
        }
           
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        if(hour > 12) {
            hour = hour - 12;
            hours.setValue(hour);
        }
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    } 
}

Target
      public ClockDisplay()
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          updateDisplay();
      }
...
      public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
...
      public void timeTick()
      {
-         minutes.increment();       
-         if(minutes.getValue() == 0){
+         minutes.increment();
+         if(minutes.getValue() == 0) {  // it just rolled over!
              hours.increment();
          }
-            
          updateDisplay();
      }
  
...
      public void setTime(int hour, int minute)
      {
-         if(hour > 12) {
-             hour = hour - 12;
-             hours.setValue(hour);
-         }
          hours.setValue(hour);
          minutes.setValue(minute);
          updateDisplay();
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
-     } 
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
+     }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=12]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]

Location: 27|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 27|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">2</span>);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();       
        if(minutes.getValue() == 0){
            hours.increment();
        }
           
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        if(hour > 12) {
            hour = hour - 12;
            hours.setValue(hour);
        }
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    } 
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private String timeType;
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }
    private void TimeType(int hour)
    {
        if(hour == 0)
        {
            hours.setValue(12);
            timeType = "am";
        }
        else if(hour == 12)
        {
            hours.setValue(12);
            timeType = "pm";
        }
    }
    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + timeType;
    }
}

Target
      private NumberDisplay minutes;
      private String displayString;    // simulates the actual display
-     private String timeType;
+     
      /**
       * Constructor for ClockDisplay objects. This constructor 
       * creates a new clock set at 00:00.
...
          setTime(hour, minute);
      }
-     private void TimeType(int hour)
-     {
-         if(hour == 0)
-         {
-             hours.setValue(12);
-             timeType = "am";
-         }
-         else if(hour == 12)
-         {
-             hours.setValue(12);
-             timeType = "pm";
-         }
-     }
+ 
      /**
       * This method should get called once every minute - it makes
       * the clock display go one minute forward.
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue() + timeType;
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=TimeType] {
      [Parameter=hour]([Modifier=[]], [PrimitiveType=])
      [VoidType=]
      [BlockStmt=] {
        [IfStmt=] {
          [BinaryExpr=hour] {
            [Operator=EQUALS]
            [NameExpr=hour]
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=setValue] {
                [NameExpr=hours]
                [IntegerLiteralExpr=12]
              }
            }
          }
          [IfStmt=] {
            [BinaryExpr=hour] {
              [Operator=EQUALS]
              [NameExpr=hour]
              [IntegerLiteralExpr=12]
            }
            [BlockStmt=] {
              [ExpressionStmt=] {
                [MethodCallExpr=setValue] {
                  [NameExpr=hours]
                  [IntegerLiteralExpr=12]
                }
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
hour <-> minutes
-- [MethodDeclaration] --
TimeType <-> timeTick
r: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [Parameter:hour, VoidType:, BlockStmt:] -> [VoidType:, Parameter:hour, BlockStmt:]
r: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [Parameter:hour, VoidType:, BlockStmt:] -> [Parameter:hour, BlockStmt:, VoidType:]
r: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt: [BinaryExpr:hour, BlockStmt:, IfStmt:] -> [IfStmt:, BinaryExpr:hour, BlockStmt:]
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt: [IfStmt:] -> [ExpressionStmt:] w/ CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt->BlockStmt->ExpressionStmt
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt: [BinaryExpr:hour, BlockStmt:] -> [Operator:EQUALS, BlockStmt:] w/ CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BinaryExpr->Operator
i: {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->ExpressionStmt->MethodCallExpr}: [] -> [NameExpr:hour] w/ {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BinaryExpr->NameExpr}
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt: [BinaryExpr:hour, BlockStmt:] -> [BinaryExpr:hour, MethodCallExpr:getValue]
 -> i: {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BinaryExpr->MethodCallExpr}: [] -> [NameExpr:hour] w/ {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt->BinaryExpr->NameExpr}
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt->ExpressionStmt: [MethodCallExpr:setValue] -> [MethodCallExpr:increment]
i: {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt->ExpressionStmt->MethodCallExpr}: [] -> [NameExpr:hours] w/ {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt->ExpressionStmt->MethodCallExpr->NameExpr}
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [Parameter:hour, VoidType:, BlockStmt:] -> [VoidType:, BlockStmt:]
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt: [BinaryExpr:hour, BlockStmt:, IfStmt:] -> [BlockStmt:, IfStmt:]

Location: 55|5
EditHint (REORDER):
r: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [Parameter:hour, VoidType:, BlockStmt:] -> [Parameter:hour, BlockStmt:, VoidType:]
Location: 54|9
EditHint (REORDER):
r: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt: [BinaryExpr:hour, BlockStmt:, IfStmt:] -> [IfStmt:, BinaryExpr:hour, BlockStmt:]
Location: 54|9
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt: [IfStmt:] -> [ExpressionStmt:] w/ CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt->BlockStmt->ExpressionStmt
Location: 54|9
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt: [BinaryExpr:hour, BlockStmt:] -> [BinaryExpr:hour, MethodCallExpr:getValue]
 -> i: {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BinaryExpr->MethodCallExpr}: [] -> [NameExpr:hour] w/ {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt->BinaryExpr->NameExpr}
Location: 51|9
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt: [BinaryExpr:hour, BlockStmt:] -> [BinaryExpr:hour, MethodCallExpr:getValue]
 -> i: {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BinaryExpr->MethodCallExpr}: [] -> [NameExpr:hour] w/ {CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt->BinaryExpr->NameExpr}
Location: 50|26
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt: [BinaryExpr:hour, BlockStmt:] -> [Operator:EQUALS, BlockStmt:] w/ CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BinaryExpr->Operator
Location: 50|17
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt: [BinaryExpr:hour, BlockStmt:] -> [Operator:EQUALS, BlockStmt:] w/ CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BinaryExpr->Operator
Location: 50|14
EditHint (REORDER):
r: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt: [BinaryExpr:hour, BlockStmt:, IfStmt:] -> [IfStmt:, BinaryExpr:hour, BlockStmt:]
Location: 47|30
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt->ExpressionStmt: [MethodCallExpr:setValue] -> [MethodCallExpr:increment]
Location: 47|13
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt->ExpressionStmt: [MethodCallExpr:setValue] -> [MethodCallExpr:increment]
some code
some code
Location: 45|20
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt: [BinaryExpr:hour, BlockStmt:, IfStmt:] -> [BlockStmt:, IfStmt:]
Location: 45|12
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt: [BinaryExpr:hour, BlockStmt:, IfStmt:] -> [BlockStmt:, IfStmt:]
Location: 45|9
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt: [IfStmt:] -> [ExpressionStmt:] w/ CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->IfStmt->BlockStmt->ExpressionStmt
Location: 44|5
EditHint (REORDER):
r: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [Parameter:hour, VoidType:, BlockStmt:] -> [Parameter:hour, BlockStmt:, VoidType:]
Location: 43|34
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [Parameter:hour, VoidType:, BlockStmt:] -> [VoidType:, BlockStmt:]
Location: 43|27
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [Parameter:hour, VoidType:, BlockStmt:] -> [VoidType:, BlockStmt:]
Location: 43|16
EditHint (REORDER):
r: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [Parameter:hour, VoidType:, BlockStmt:] -> [VoidType:, Parameter:hour, BlockStmt:]
Location: 43|13
EditHint (REORDER):
r: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration: [Parameter:hour, VoidType:, BlockStmt:] -> [VoidType:, Parameter:hour, BlockStmt:]

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private String timeType;
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }
    private v<span class="reorder" data-tooltip="This code is good, but it may be in the wrong place.">oid</span> TimeType(i<span class="deletion" data-tooltip="This code may be incorrect.">nt hour</span>)
    {<span class="reorder" data-tooltip="This code is good, but it may be in the wrong place.">
        i<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">f(h<span class="deletion" data-tooltip="This code may be incorrect.">our == 0</span>)
        {
            h<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">ours.setValue(12)</span>;
            timeType = "am";
        }
        else i<span class="reorder" data-tooltip="This code is good, but it may be in the wrong place.">f(h<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">our == 12</span>)
        {<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">
            hours.setValue(12);
            timeType = "pm";
        }</span></span></span>
    }</span>
    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + timeType;
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     * 12 hour clock format.
     */
    private void updateDisplay()
    {
        if(hours.getValue() == 0) {
            displayString = 12 + ":" + 
                        minutes.getDisplayValue() + " AM";
        }
        
        else if(hours.getValue() < 12) {
            displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + " AM";
        }
        
        else if(hours.getValue() == 12) {
            displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + " PM";
        }
        
        else {
            displayString = hours.getValue() - 12 + ":" + 
                        minutes.getDisplayValue() + " PM";
        }
    }
}

Target
      /**
       * Update the internal string that represents the display.
-      * 12 hour clock format.
       */
      private void updateDisplay()
      {
-         if(hours.getValue() == 0) {
-             displayString = 12 + ":" + 
-                         minutes.getDisplayValue() + " AM";
-         }
+         int hour = hours.getValue();
+         String suffix;
          
-         else if(hours.getValue() < 12) {
-             displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue() + " AM";
+         if(hour >= 12) {
+             suffix = "pm";
          }
-         
-         else if(hours.getValue() == 12) {
-             displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue() + " PM";
-         }
-         
          else {
-             displayString = hours.getValue() - 12 + ":" + 
-                         minutes.getDisplayValue() + " PM";
+             suffix = "am";
          }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     * 12 hour clock format.
     */
    private void updateDisplay()
    {
        if(hours.getValue() == 0) {
            displayString = 12 + ":" + 
                        minutes.getDisplayValue() + " AM";
        }
        
        else if(hours.getValue() < 12) {
            displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + " AM";
        }
        
        else if(hours.getValue() == 12) {
            displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + " PM";
        }
        
        else {
            displayString = hours.getValue() - 12 + ":" + 
                        minutes.getDisplayValue() + " PM";
        }
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    

    
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(59);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(59);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
    
    
    
    
}

Target
      private String displayString;    // simulates the actual display
      
- 
-     
-     
      /**
       * Constructor for ClockDisplay objects. This constructor 
       * creates a new clock set at 00:00.
...
      public ClockDisplay()
      {
-         hours = new NumberDisplay(12);
-         minutes = new NumberDisplay(59);
+         hours = new NumberDisplay(24);
+         minutes = new NumberDisplay(60);
          updateDisplay();
      }
  
...
      public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(12);
-         minutes = new NumberDisplay(59);
+         hours = new NumberDisplay(24);
+         minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
  
...
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
-     
-     
-     
-     
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=12]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]

Location: 30|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 30|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    

    
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">2</span>);
        minutes = new NumberDisplay(59);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(59);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
    
    
    
    
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}

Target
      private void updateDisplay()
      {
-         displayString = hours.getDisplayValue() + ":" + 
-                         minutes.getDisplayValue();
+         int hour = hours.getValue();
+         String suffix;
+         
+         if(hour >= 12) {
+             suffix = "pm";
+         }
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=24]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue();
    }
}


/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        String hrValue;
        String minValue;
        
        hrValue = hours.getDisplayValue();
        minValue = minutes.getDisplayValue();
        if (hrValue == "00")
        {
            hrValue = "12";
        }
        displayString = hrValue + ":" + 
                        minValue;
    }
}

Target
      public ClockDisplay()
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          updateDisplay();
      }
...
      public ClockDisplay(int hour, int minute)
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
          setTime(hour, minute);
      }
...
      private void updateDisplay()
      {
-         String hrValue;
-         String minValue;
+         int hour = hours.getValue();
+         String suffix;
          
-         hrValue = hours.getDisplayValue();
-         minValue = minutes.getDisplayValue();
-         if (hrValue == "00")
-         {
-             hrValue = "12";
+         if(hour >= 12) {
+             suffix = "pm";
          }
-         displayString = hrValue + ":" + 
-                         minValue;
+         else {
+             suffix = "am";
+         }
+         if(hour >= 12) {
+             hour -= 12;
+         }
+         if(hour == 0) {
+             hour = 12;
+         }
+         displayString = hour + ":" + 
+                         minutes.getDisplayValue() + suffix;
      }
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=12]
            }
          }
        }
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
          }
        }
      }
    }
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]

Location: 27|36
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
Location: 27|35
EditHint (REPLACEMENT):
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
some code
some code

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(1<span class="insertion" data-tooltip="You may need to add some code here, instead of what you have."><+></span><span class="replacement" data-tooltip="This code may need to be replaced with something else.">2</span>);
        minutes = new NumberDisplay(60);
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute)
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        setTime(hour, minute);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();
        }
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        String hrValue;
        String minValue;
        
        hrValue = hours.getDisplayValue();
        minValue = minutes.getDisplayValue();
        if (hrValue == "00")
        {
            hrValue = "12";
        }
        displayString = hrValue + ":" + 
                        minValue;
    }
}

You may be missing the following:<ul><li/>some code
</ul>

/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private String displayString;    // simulates the actual display
    private String amPm ;
    private static final String AM = "a.m";
    private static final String PM = "p.m";
    
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(12);
        minutes = new NumberDisplay(60);
        amPm = AM;
       // updateDisplay();
    }
    
    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute, String apm )
    {
        
        if ( hour == 0 ) { hour = 12;} // checks if user enter 0 instead o 12
        
        /*hours = new NumberDisplay(hour);
        minutes = new NumberDisplay(minute);
        
        // checks the validation of the string amPm 
          if ( apm.equals(AM) || apm.equals(PM)){
            amPm = AM;
        }
       // setTime(hour, minute,amPm);*/
    }
    
    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment();


            if ( hours.getValue() == 12)
            {
                if( amPm.equals(AM))
                    {
             // logic where after increment to 12 from 11 am --> change that to 12 pm
                        amPm = PM;}
                else {
                  // logic where after increment to 12 from 11 pm --> change that to 12 am
                amPm = AM;
                }
        }
      
        updateDisplay();
    }
}

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    
    public void setTime(int hour, int minute, String apm)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        // validation of correct input of string amPm
       if ( apm.equals(AM) || apm.equals(PM)){
            amPm = AM;
        }
        updateDisplay();
    }

    /*
    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    
    private void updateDisplay()
    {
        
        displayString = hours.getDisplayValue() + ":" +  
        minutes.getDisplayValue() + "" + amPm;
    }

}

Target
      private NumberDisplay hours;
      private NumberDisplay minutes;
-     private String displayString;    // simulates the actual display
-     private String amPm ;
-     private static final String AM = "a.m";
-     private static final String PM = "p.m";
+     private String displayString; 
+     private String AmOrPm;
+     // simulates the actual display
      
-     
      /**
       * Constructor for ClockDisplay objects. This constructor 
       * creates a new clock set at 00:00.
...
      public ClockDisplay()
      {
-         hours = new NumberDisplay(12);
+         hours = new NumberDisplay(24);
          minutes = new NumberDisplay(60);
-         amPm = AM;
-        // updateDisplay();
+         updateDisplay();
      }
-     
+ 
      /**
       * Constructor for ClockDisplay objects. This constructor
       * creates a new clock set at the time specified by the 
...
       * parameters.
       */
-     public ClockDisplay(int hour, int minute, String apm )
+     public ClockDisplay(int hour, int minute)
      {
-         
-         if ( hour == 0 ) { hour = 12;} // checks if user enter 0 instead o 12
-         
-         /*hours = new NumberDisplay(hour);
-         minutes = new NumberDisplay(minute);
-         
-         // checks the validation of the string amPm 
-           if ( apm.equals(AM) || apm.equals(PM)){
-             amPm = AM;
-         }
-        // setTime(hour, minute,amPm);*/
+         hours = new NumberDisplay(24);
+         minutes = new NumberDisplay(60);
+         setTime(hour, minute);
      }
-     
+ 
      /**
       * This method should get called once every minute - it makes
       * the clock display go one minute forward.
...
          if(minutes.getValue() == 0) {  // it just rolled over!
              hours.increment();
- 
- 
-             if ( hours.getValue() == 12)
-             {
-                 if( amPm.equals(AM))
-                     {
-              // logic where after increment to 12 from 11 am --> change that to 12 pm
-                         amPm = PM;}
-                 else {
-                   // logic where after increment to 12 from 11 pm --> change that to 12 am
-                 amPm = AM;
-                 }
          }
-       
          updateDisplay();
      }
- }
  
      /**
       * Set the time of the display to the specified hour and
...
       * minute.
       */
-     
-     public void setTime(int hour, int minute, String apm)
+     public void setTime(int hour, int minute)
      {
          hours.setValue(hour);
          minutes.setValue(minute);
-         // validation of correct input of string amPm
-        if ( apm.equals(AM) || apm.equals(PM)){
-             amPm = AM;
-         }
          updateDisplay();
      }
  
-     /*
      /**
       * Return the current time of this display in the format HH:MM.
       */
...
       * Update the internal string that represents the display.
       */
-     
      private void updateDisplay()
-     {
+     {   if (hours.getValue() >= 12){
+         AmOrPm = "pm";
+     }else{
+         AmOrPm = "am";
+     }
          
-         displayString = hours.getDisplayValue() + ":" +  
-         minutes.getDisplayValue() + "" + amPm;
+         if(hours.getValue() > 12){
+             int newHours;
+             newHours = hours.getValue() -12;
+             hours.setValue(newHours);
+             
+         }
+         
+         
+         displayString = hours.getDisplayValue() + ":" + 
+                         minutes.getDisplayValue() + AmOrPm;
      }
- 
  }

[CompilationUnit=] {
  [ClassOrInterfaceDeclaration=ClockDisplay] {
    [FieldDeclaration=] {
      [Modifier=[PRIVATE]]
      [VariableDeclarator=hours] {
        [ClassOrInterfaceType=NumberDisplay]
      }
    }
    [ConstructorDeclaration=ClockDisplay] {
      [BlockStmt=] {
        [ExpressionStmt=] {
          [AssignExpr=] {
            [Operator=ASSIGN]
            [NameExpr=hours]
            [ObjectCreationExpr=NumberDisplay] {
              [ClassOrInterfaceType=NumberDisplay]
              [IntegerLiteralExpr=12]
            }
          }
        }
        [LineComment=]
      }
    }
    [MethodDeclaration=timeTick] {
      [VoidType=]
      [BlockStmt=] {
        [ExpressionStmt=] {
          [MethodCallExpr=increment] {
            [NameExpr=minutes]
          }
        }
        [IfStmt=] {
          [BinaryExpr=] {
            [Operator=EQUALS]
            [MethodCallExpr=getValue] {
              [NameExpr=minutes]
            }
            [IntegerLiteralExpr=0]
          }
          [BlockStmt=] {
            [ExpressionStmt=] {
              [MethodCallExpr=increment] {
                [NameExpr=hours]
              }
            }
            [IfStmt=] {
              [BinaryExpr=] {
                [Operator=EQUALS]
                [MethodCallExpr=getValue] {
                  [NameExpr=hours]
                }
                [IntegerLiteralExpr=12]
              }
              [BlockStmt=] {
                [IfStmt=] {
                  [MethodCallExpr=equals] {
                    [NameExpr=amPm]
                  }
                  [BlockStmt=] {
                    [ExpressionStmt=] {
                      [AssignExpr=] {
                        [Operator=ASSIGN]
                        [NameExpr=amPm]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    [JavadocComment=]
  }
}
Value mappings:
-- [NameExpr, VariableDeclarator, Parameter] --
hours <-> hours
minutes <-> minutes
-- [MethodDeclaration] --
timeTick <-> timeTick
i: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt->ExpressionStmt->AssignExpr->ObjectCreationExpr: [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:12] -> [ClassOrInterfaceType:NumberDisplay, IntegerLiteralExpr:24]
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, LineComment:] -> [ExpressionStmt:]
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]

Location: 78|9
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]
Location: 68|13
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->MethodDeclaration->BlockStmt->IfStmt->BlockStmt: [ExpressionStmt:, IfStmt:] -> [ExpressionStmt:]
Location: 34|27
EditHint (DELETION):
d: CompilationUnit->ClassOrInterfaceDeclaration->ConstructorDeclaration->BlockStmt: [ExpressionStmt:, LineComment:] -> [ExpressionStmt:]
