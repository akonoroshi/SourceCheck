snapshot {
    @defHint PADDLE_POSITION {
        :`The left Paddle position should be set to (-215, 0). To set its position use "go to x: __ y: __" block (under Motion). Note that this position should be set at beginning of the Paddle code`
    }
    @defHint FOREVER_LOOP {
        :`To make the Paddle keep moving during the game, you need its code to run forever. The "forever" block (under Control) runs the code you put inside of it forever.`
    }
    @defHint IF_CONDITION {
        :`The Paddle should move up if the the mouse is above the Paddle's "y position" (under Motion) and down if it is lower.`
    }
    @defHint IF_CONDITION_LEFT {
        :`The Paddle should move up if the up arrow key is pressed and the Paddle's "y position" is lower then the edge of the screen (150). Moving down works the same way.`
    }
    @defHint AND_OPERATOR {
        :`You can combine two conditions for one "if" block by using the "and" block (under Operators).`
    }
    @defHint KEY_PRESSED {
        :`Use the "key pressed" block (under Sensing) to check whether a key is pressed. You can choose which key from the dropdown list.`
    }
    @defHint COMPARE {
        :`Use "<" or ">" blocks (under Operators) to check if the Paddle's "y position" block is above or below the "mouse y" position (under Sensing).`
    }
    @defHint Y_VALUE1 {
        :`The Paddle's "y position" (under Motion) must be less than 150. If it exceeds 150 the Paddle will be off screen.`
    }
    @defHint Y_VALUE2 {
        :`The Paddle's "y position" (under Motion) must be greater than -150. If it is less than -150 the Paddle will be off screen.`
    }
    @defHint PADDLE_UP {
        :`Use the Paddle's "change y by __" block (under Motion) with a positive value to move the Paddle up, or with a negative value to move it down.`
    }
    @defHint POINTS_SETUP {
        :`Make two variables, one to hold the points of the left Paddle and the other to hold the points of the right Paddle. You can set these variables to an initial value by using "set __ to __" block (under Variables) .`
    }
    @defHint BALL_FOREVER {
        :`To make the Ball keep moving during the game, you need its code to run forever. The "forever" block (under Control) runs the code you put inside of it forever.`
    }
    @defHint MOVE_BALL {
        :`Use "move" block (under Motion) with a positive value to allow the ball to move forward.`
    }
    @defHint TOUCH_PADDLE {
        :`Use the "touching" block (under Sensing) to detect if the Ball sprite has touched the Paddle, either the left or the right Paddle. Note that this block should be used in an "if" condition.`
    }
    @defHint TOUCH_BACK_EDGE {
        :`If the ball touches the left or right edge, the opposite player should score a point.`
    }
    @defHint BACK_EDGE_X {
        :`You can use the Ball's "x position" (under Motion) and the ">" block (under Operators) to check if it is touching the right edge (x > 230) or left edge (x < -230).`
    }
    @defHint BALL_DIRECTION {
        :`Use the "point in direction __" block (under Motion) point the Ball in to the opposite direction when it hits the Paddle. To make it bounce, the ball should face 360 - its current "direction" (under Motion).`
    }
    @defHint SCORE_CHANGE {
        :`Each player's score should start at 0. The right player's score goes up when the ball hits the left wall, and vice versa.`
    }
    @defHint BOUNCE_OFF {
        :`To make the ball bounces off any edge, use "if on edge, bounce" (under Motion)`
    }
    stage {
        sprite {
            script {
                receiveGo
                setScale(literal)
                gotoXY(literal, literal)
                @hint FOREVER_LOOP
                doForever(script {
                    @or {
                        @inline {
                            @hint IF_CONDITION
                            doIf(@or {
                                    @hint COMPARE
                                    reportLessThan(@hint IF_CONDITION yPosition, @hint COMPARE reportMouseY)
                                    reportAnd(@hint COMPARE reportLessThan(@hint IF_CONDITION yPosition, @hint COMPARE reportMouseY), @hint Y_VALUE1 reportLessThan(yPosition, literal:150))
                                }, script {
                                @hint PADDLE_UP
                                changeYPosition(literal)
                            })
                            @hint IF_CONDITION
                            doIf(@or {
                                    @hint COMPARE
                                    reportLessThan(@hint COMPARE reportMouseY, @hint IF_CONDITION yPosition)
                                    reportAnd(@hint COMPARE reportLessThan(@hint COMPARE reportMouseY, @hint IF_CONDITION yPosition), @hint Y_VALUE2 reportLessThan(literal:-150, yPosition))
                                }, script {
                                @hint PADDLE_UP
                                changeYPosition(literal)
                            })
                        }
                        setYPosition(reportMouseY)
                    }
                })
            }
        }
        sprite {
            script {
                receiveGo
                @anyOrder {
                    @hint POINTS_SETUP {
                        doSetVar(varMenu:rightPoints, literal)
                        doSetVar(varMenu:leftPoints, literal)
                    }
                    setScale(literal)
                    evaluateCustomBlock:resetBall
                }
            }
            script {
                receiveKey(literal)
                @optional { setHeading(@anything) }
                @hint BALL_FOREVER
                doForever(script {
                    @anyOrder {
                        @hint MOVE_BALL
                        forward(literal)
                        @or {
                            @repeat(2) {
                                @hint TOUCH_PADDLE
                                doIf (@hint TOUCH_PADDLE reportTouchingObject(literal), script {
                                    @hint BALL_DIRECTION setHeading(@hint BALL_DIRECTION reportDifference(literal, @hint BALL_DIRECTION direction))
                                })
                            }
                            @hint TOUCH_PADDLE
                            doIf (reportOr(@hint TOUCH_PADDLE reportTouchingObject(literal), @hint TOUCH_PADDLE reportTouchingObject(literal)),script {
                                @hint BALL_DIRECTION setHeading(@hint BALL_DIRECTION reportDifference(literal, @hint BALL_DIRECTION direction))
                            })
                        }
                        @hint TOUCH_BACK_EDGE
                        doIf(@or {
                            @hint BACK_EDGE_X
                            reportLessThan(literal, @hint BACK_EDGE_X xPosition)
                            reportAnd(@hint BACK_EDGE_X reportLessThan(literal, @hint BACK_EDGE_X xPosition), reportTouchingObject(literal))
                        }, script {
                            @hint SCORE_CHANGE
                            doChangeVar(varMenu:leftPoints, literal)
                            evaluateCustomBlock:resetBall
                        })
                        @hint TOUCH_BACK_EDGE
                        doIf(@or {
                            @hint BACK_EDGE_X 
                            reportLessThan(@hint BACK_EDGE_X xPosition, literal)
                            reportAnd(@hint BACK_EDGE_X reportLessThan(xPosition, literal), reportTouchingObject(literal))
                        }, script {
                            @hint SCORE_CHANGE
                            doChangeVar(varMenu:rightPoints, literal)
                            evaluateCustomBlock:resetBall
                        })
                    }
                    @hint BOUNCE_OFF
                    bounceOffEdge
                })
            }
        }
        sprite {
            @defVar(FOREVER_KEYS) {
                script {
                    receiveGo
                    setScale(literal)
                    @hint PADDLE_POSITION
                    gotoXY(literal, literal)
                    @if (FOREVER_KEYS) {
                        @hint FOREVER_LOOP
                        doForever(script {
                            @defVar(Y_FIRST) {
                                @anyOrder {
                                    @hint IF_CONDITION_LEFT
                                    doIf(@hint AND_OPERATOR reportAnd(@hint KEY_PRESSED reportKeyPressed(literal),@hint Y_VALUE1 reportLessThan(
                                        @if(Y_FIRST) {@hint Y_VALUE1 yPosition, literal }
                                        @unless(Y_FIRST) { literal, @hint Y_VALUE2 yPosition }
                                    )), script {@hint PADDLE_UP
                                        changeYPosition(literal)
                                    })
                                    @hint IF_CONDITION_LEFT
                                    doIf(@hint AND_OPERATOR reportAnd(@hint KEY_PRESSED reportKeyPressed(literal), @hint Y_VALUE2 reportLessThan(
                                        @if(Y_FIRST) {literal,  @hint Y_VALUE2  yPosition }
                                        @unless(Y_FIRST) {@hint Y_VALUE1 yPosition, literal }
                                    )), script { @hint PADDLE_UP
                                        changeYPosition(literal)
                                    })
                                }
                            }
                        })
                    }
                }
                @unless (FOREVER_KEYS) {
                    script {
                        receiveKey
                        @hint IF_CONDITION_LEFT
                        doIf(@hint Y_VALUE1 reportLessThan( @hint Y_VALUE1 yPosition, literal), script {
                            @hint PADDLE_UP
                            changeYPosition(literal)
                        })
                    }
                    script {
                        receiveKey
                        @hint IF_CONDITION_LEFT
                        doIf(@hint Y_VALUE2 reportLessThan(literal, @hint Y_VALUE2 yPosition), script {
                            @hint PADDLE_UP
                            changeYPosition(literal)
                        })
                    }
                }
            }
        }
    }
    customBlock:resetBall {
        script {
            gotoXY(literal, literal)
            setHeading(reportRandom(literal, literal))
            doStopThis(literal)
        }
    }
    varDec:rightPoints
    varDec:leftPoints
}
