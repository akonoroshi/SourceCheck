Module(list {
    FunctionDef:kthDigit(arguments(list {
        arg:x(null)
        arg:k(null)
    }, null, list, list, null, list), list {
        @optional {
            Assign(list {
                Name:x(Store)
            }, Call(Name:abs(Load), list {
                Name:x(Load)
            }, list))
        }
        @defBlock DIVISOR {
            BinOp(Num:10, Pow, BinOp(Name:k(Load), Sub, Num:1))
        }
        @defVar (VAR) {
            @defBlock TRUNCATED {
                BinOp(Name:x(Load), Mod, BinOp(Num:10, Pow, Name:k(Load)))
            }
            @if (VAR) {
                Assign(list {
                    Name:truncated(Store)
                }, @block TRUNCATED)
            }
            @defBlock ANSWER {
                @unless (VAR) {
                    @or {
                        BinOp(BinOp(Name:x(Load), FloorDiv, @block DIVISOR), Mod, Num:10)
                        BinOp(@block TRUNCATED, FloorDiv, @block DIVISOR)
                    }
                }
                @if (VAR) {
                    BinOp(Name:truncated(Load), FloorDiv, @block DIVISOR)
                }
            }
            @or {
                @inline {
                    Assign(list {
                        Name:answer(Store)
                    }, @block ANSWER)
                    Return(Name:answer(Load))
                }
                Return(@block ANSWER)
            }
        }
    }, list, null)
})
